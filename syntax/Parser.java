
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import semantic.syntaxTree.BlockCode;
import semantic.syntaxTree.block.Block;
import semantic.syntaxTree.declaration.*;
import semantic.syntaxTree.expression.Expression;
import semantic.syntaxTree.expression.call.*;
import semantic.syntaxTree.expression.identifier.*;
import semantic.syntaxTree.expression.constValue.*;
import semantic.syntaxTree.expression.operation.arithmetic.*;
import semantic.syntaxTree.expression.operation.bitwise.*;
import semantic.syntaxTree.expression.operation.logical.*;
import semantic.syntaxTree.expression.operation.relational.*;
import semantic.syntaxTree.expression.operation.unary.*;
import semantic.syntaxTree.expression.operation.unary.prefix_postfix.*;
import semantic.syntaxTree.statement.*;
import semantic.syntaxTree.statement.assignment.*;
import semantic.syntaxTree.statement.controlflow.ifelse.*;
import semantic.syntaxTree.statement.controlflow.switchcase.*;
import semantic.syntaxTree.statement.controlflow.loop.*;
import semantic.typeTree.TypeTree;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\032\006\000\002\026\005\000\002\026\005\000" +
    "\002\027\007\000\002\027\006\000\002\027\007\000\002" +
    "\027\006\000\002\030\005\000\002\030\003\000\002\031" +
    "\004\000\002\031\005\000\002\033\004\000\002\033\002" +
    "\000\002\025\011\000\002\024\004\000\002\024\003\000" +
    "\002\037\002\000\002\023\010\000\002\040\002\000\002" +
    "\023\007\000\002\041\002\000\002\023\007\000\002\042" +
    "\002\000\002\023\006\000\002\021\007\000\002\021\005" +
    "\000\002\022\005\000\002\022\003\000\002\022\007\000" +
    "\002\022\005\000\002\036\003\000\002\043\002\000\002" +
    "\044\002\000\002\014\007\000\002\014\004\000\002\016" +
    "\003\000\002\016\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\004\000\002\015\007\000\002\015\006\000" +
    "\002\013\004\000\002\013\003\000\002\013\003\000\002" +
    "\013\004\000\002\013\005\000\002\013\004\000\002\013" +
    "\004\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\003\006\000\002\004\003\000\002\004\005\000\002" +
    "\011\011\000\002\011\007\000\002\011\016\000\002\011" +
    "\013\000\002\017\002\000\002\017\007\000\002\012\013" +
    "\000\002\012\013\000\002\012\012\000\002\012\011\000" +
    "\002\012\011\000\002\020\002\000\002\020\003\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\003\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\003\000\002\034\006\000\002\034\006\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\003\000\002\007\003\000\002\005\003\000\002" +
    "\005\006\000\002\005\005\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\100\005\001\002\000\004\002\341\001" +
    "\002\000\052\035\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\051\uffdc\067\uffdc\071\uffdc\072" +
    "\uffdc\073\uffdc\074\uffdc\101\007\102\uffdc\103\uffdc\105\uffdc" +
    "\110\uffdc\121\uffdc\001\002\000\004\002\uffdd\001\002\000" +
    "\064\002\uffd9\035\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\051\uffd9\067\uffd9\070\uffd9\071" +
    "\uffd9\072\uffd9\073\uffd9\074\uffd9\076\uffd9\077\uffd9\101\uffd9" +
    "\102\uffd9\103\uffd9\104\uffd9\105\uffd9\110\uffd9\121\uffd9\001" +
    "\002\000\050\035\020\041\014\042\011\043\027\044\046" +
    "\045\041\046\015\047\025\051\032\067\022\071\016\072" +
    "\033\073\012\074\021\102\043\103\045\105\031\110\036" +
    "\121\030\001\002\000\010\031\uff96\034\uff96\035\uff96\001" +
    "\002\000\004\004\340\001\002\000\052\035\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\051" +
    "\uffd5\067\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\101\uffd5" +
    "\102\uffd5\103\uffd5\105\uffd5\110\uffd5\121\uffd5\001\002\000" +
    "\010\031\uff97\034\uff97\035\uff97\001\002\000\010\031\uff92" +
    "\034\uff92\035\uff92\001\002\000\042\004\335\006\066\015" +
    "\064\024\056\030\062\035\057\055\065\056\060\107\052" +
    "\111\063\112\071\113\054\114\070\115\061\116\074\117" +
    "\053\001\002\000\052\035\020\041\014\042\011\043\027" +
    "\044\046\045\041\046\015\047\025\051\032\067\022\071" +
    "\016\072\033\073\012\074\021\101\uffd8\102\043\103\045" +
    "\105\031\110\036\121\030\001\002\000\030\030\156\032" +
    "\uff8e\034\uff8f\035\uff8f\052\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\064\uff8e\065\uff8e\066\uff8e\001\002\000\004\030\313\001" +
    "\002\000\004\030\305\001\002\000\006\034\242\035\uffef" +
    "\001\002\000\004\101\uffdb\001\002\000\010\031\uff91\034" +
    "\uff91\035\uff91\001\002\000\052\035\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\051\uffcf\067" +
    "\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\101\uffcf\102\uffcf" +
    "\103\uffcf\105\uffcf\110\uffcf\121\uffcf\001\002\000\010\031" +
    "\uff95\034\uff95\035\uff95\001\002\000\004\030\262\001\002" +
    "\000\004\030\254\001\002\000\004\035\uffe5\001\002\000" +
    "\004\004\250\001\002\000\004\004\247\001\002\000\052" +
    "\035\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\051\uffd0\067\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\074\uffd0\101\uffd0\102\uffd0\103\uffd0\105\uffd0\110\uffd0\121" +
    "\uffd0\001\002\000\024\035\171\041\014\042\011\043\027" +
    "\044\046\045\041\046\015\047\025\051\230\001\002\000" +
    "\022\032\076\052\100\061\211\062\206\063\205\064\212" +
    "\065\207\066\210\001\002\000\010\031\uff90\034\uff90\035" +
    "\uff90\001\002\000\010\031\uff93\034\uff93\035\uff93\001\002" +
    "\000\004\004\226\001\002\000\004\030\173\001\002\000" +
    "\052\035\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\051\uffd6\067\uffd6\071\uffd6\072\uffd6\073" +
    "\uffd6\074\uffd6\101\uffd6\102\uffd6\103\uffd6\105\uffd6\110\uffd6" +
    "\121\uffd6\001\002\000\004\100\005\001\002\000\010\031" +
    "\uff94\034\uff94\035\uff94\001\002\000\004\104\050\001\002" +
    "\000\004\030\051\001\002\000\040\006\066\015\064\024" +
    "\056\030\062\035\057\055\065\056\060\107\052\111\063" +
    "\112\071\113\054\114\070\115\061\116\074\117\053\001" +
    "\002\000\004\030\167\001\002\000\052\004\uff85\005\uff85" +
    "\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014" +
    "\uff85\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85" +
    "\025\uff85\026\uff85\031\uff85\033\uff85\053\uff85\001\002\000" +
    "\052\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89" +
    "\012\uff89\013\uff89\014\uff89\016\uff89\017\uff89\020\uff89\021" +
    "\uff89\022\uff89\023\uff89\025\uff89\026\uff89\031\uff89\033\uff89" +
    "\053\uff89\001\002\000\044\005\112\006\103\007\106\010" +
    "\105\011\107\012\121\013\113\014\122\016\111\017\117" +
    "\020\115\021\116\022\110\023\120\025\104\026\123\031" +
    "\165\001\002\000\040\006\066\015\064\024\056\030\062" +
    "\035\057\055\065\056\060\107\052\111\063\112\071\113" +
    "\054\114\070\115\061\116\074\117\053\001\002\000\100" +
    "\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e" +
    "\022\uff8e\023\uff8e\025\uff8e\026\uff8e\030\156\031\uff8e\032" +
    "\uff8e\033\uff8e\052\uff8e\053\uff8e\055\uff8e\056\uff8e\061\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\001\002\000" +
    "\004\035\146\001\002\000\052\004\uff86\005\uff86\006\uff86" +
    "\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\025\uff86" +
    "\026\uff86\031\uff86\033\uff86\053\uff86\001\002\000\056\006" +
    "\066\015\064\024\056\030\062\035\057\041\014\042\011" +
    "\043\027\044\046\045\041\046\015\047\025\055\065\056" +
    "\060\107\052\111\063\112\071\113\054\114\070\115\061" +
    "\116\074\117\053\001\002\000\052\004\uff8b\005\uff8b\006" +
    "\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\025" +
    "\uff8b\026\uff8b\031\uff8b\033\uff8b\053\uff8b\001\002\000\040" +
    "\006\066\015\064\024\056\030\062\035\057\055\065\056" +
    "\060\107\052\111\063\112\071\113\054\114\070\115\061" +
    "\116\074\117\053\001\002\000\004\035\146\001\002\000" +
    "\040\006\066\015\064\024\056\030\062\035\057\055\065" +
    "\056\060\107\052\111\063\112\071\113\054\114\070\115" +
    "\061\116\074\117\053\001\002\000\062\004\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\025\uffa3\026\uffa3\031\uffa3\032\076\033\uffa3\052\100\053" +
    "\uffa3\055\077\056\075\001\002\000\052\004\uff88\005\uff88" +
    "\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014" +
    "\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88" +
    "\025\uff88\026\uff88\031\uff88\033\uff88\053\uff88\001\002\000" +
    "\052\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\012\uff8a\013\uff8a\014\uff8a\016\uff8a\017\uff8a\020\uff8a\021" +
    "\uff8a\022\uff8a\023\uff8a\025\uff8a\026\uff8a\031\uff8a\033\uff8a" +
    "\053\uff8a\001\002\000\052\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\025\uff9a\026" +
    "\uff9a\031\uff9a\033\uff9a\053\uff9a\001\002\000\052\004\uff9e" +
    "\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\025\uff9e\026\uff9e\031\uff9e\033\uff9e\053\uff9e\001" +
    "\002\000\052\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\014\uff87\016\uff87\017\uff87\020" +
    "\uff87\021\uff87\022\uff87\023\uff87\025\uff87\026\uff87\031\uff87" +
    "\033\uff87\053\uff87\001\002\000\052\004\uffa0\005\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\025" +
    "\uffa0\026\uffa0\031\uffa0\033\uffa0\053\uffa0\001\002\000\040" +
    "\006\066\015\064\024\056\030\062\035\057\055\065\056" +
    "\060\107\052\111\063\112\071\113\054\114\070\115\061" +
    "\116\074\117\053\001\002\000\052\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\025" +
    "\uff9f\026\uff9f\031\uff9f\033\uff9f\053\uff9f\001\002\000\004" +
    "\035\101\001\002\000\076\004\uff8c\005\uff8c\006\uff8c\007" +
    "\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\016\uff8c" +
    "\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\025\uff8c\026" +
    "\uff8c\031\uff8c\032\uff8c\033\uff8c\052\uff8c\053\uff8c\055\uff8c" +
    "\056\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066" +
    "\uff8c\001\002\000\044\005\112\006\103\007\106\010\105" +
    "\011\107\012\121\013\113\014\122\016\111\017\117\020" +
    "\115\021\116\022\110\023\120\025\104\026\123\033\114" +
    "\001\002\000\040\006\066\015\064\024\056\030\062\035" +
    "\057\055\065\056\060\107\052\111\063\112\071\113\054" +
    "\114\070\115\061\116\074\117\053\001\002\000\040\006" +
    "\066\015\064\024\056\030\062\035\057\055\065\056\060" +
    "\107\052\111\063\112\071\113\054\114\070\115\061\116" +
    "\074\117\053\001\002\000\040\006\066\015\064\024\056" +
    "\030\062\035\057\055\065\056\060\107\052\111\063\112" +
    "\071\113\054\114\070\115\061\116\074\117\053\001\002" +
    "\000\040\006\066\015\064\024\056\030\062\035\057\055" +
    "\065\056\060\107\052\111\063\112\071\113\054\114\070" +
    "\115\061\116\074\117\053\001\002\000\040\006\066\015" +
    "\064\024\056\030\062\035\057\055\065\056\060\107\052" +
    "\111\063\112\071\113\054\114\070\115\061\116\074\117" +
    "\053\001\002\000\040\006\066\015\064\024\056\030\062" +
    "\035\057\055\065\056\060\107\052\111\063\112\071\113" +
    "\054\114\070\115\061\116\074\117\053\001\002\000\040" +
    "\006\066\015\064\024\056\030\062\035\057\055\065\056" +
    "\060\107\052\111\063\112\071\113\054\114\070\115\061" +
    "\116\074\117\053\001\002\000\040\006\066\015\064\024" +
    "\056\030\062\035\057\055\065\056\060\107\052\111\063" +
    "\112\071\113\054\114\070\115\061\116\074\117\053\001" +
    "\002\000\040\006\066\015\064\024\056\030\062\035\057" +
    "\055\065\056\060\107\052\111\063\112\071\113\054\114" +
    "\070\115\061\116\074\117\053\001\002\000\076\004\uff8d" +
    "\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\025\uff8d\026\uff8d\031\uff8d\032\uff8d\033\uff8d\052" +
    "\uff8d\053\uff8d\055\uff8d\056\uff8d\061\uff8d\062\uff8d\063\uff8d" +
    "\064\uff8d\065\uff8d\066\uff8d\001\002\000\040\006\066\015" +
    "\064\024\056\030\062\035\057\055\065\056\060\107\052" +
    "\111\063\112\071\113\054\114\070\115\061\116\074\117" +
    "\053\001\002\000\040\006\066\015\064\024\056\030\062" +
    "\035\057\055\065\056\060\107\052\111\063\112\071\113" +
    "\054\114\070\115\061\116\074\117\053\001\002\000\040" +
    "\006\066\015\064\024\056\030\062\035\057\055\065\056" +
    "\060\107\052\111\063\112\071\113\054\114\070\115\061" +
    "\116\074\117\053\001\002\000\040\006\066\015\064\024" +
    "\056\030\062\035\057\055\065\056\060\107\052\111\063" +
    "\112\071\113\054\114\070\115\061\116\074\117\053\001" +
    "\002\000\040\006\066\015\064\024\056\030\062\035\057" +
    "\055\065\056\060\107\052\111\063\112\071\113\054\114" +
    "\070\115\061\116\074\117\053\001\002\000\040\006\066" +
    "\015\064\024\056\030\062\035\057\055\065\056\060\107" +
    "\052\111\063\112\071\113\054\114\070\115\061\116\074" +
    "\117\053\001\002\000\040\006\066\015\064\024\056\030" +
    "\062\035\057\055\065\056\060\107\052\111\063\112\071" +
    "\113\054\114\070\115\061\116\074\117\053\001\002\000" +
    "\052\004\uffa5\005\112\006\103\007\106\010\105\011\107" +
    "\012\121\013\113\014\122\016\111\017\117\020\115\021" +
    "\116\022\110\023\120\025\104\026\uffa5\031\uffa5\033\uffa5" +
    "\053\uffa5\001\002\000\052\004\uffae\005\112\006\103\007" +
    "\106\010\105\011\107\012\121\013\uffae\014\uffae\016\111" +
    "\017\117\020\115\021\116\022\110\023\120\025\uffae\026" +
    "\uffae\031\uffae\033\uffae\053\uffae\001\002\000\052\004\uffaf" +
    "\005\112\006\103\007\106\010\105\011\107\012\uffaf\013" +
    "\uffaf\014\uffaf\016\111\017\117\020\115\021\116\022\110" +
    "\023\120\025\uffaf\026\uffaf\031\uffaf\033\uffaf\053\uffaf\001" +
    "\002\000\046\004\uffaa\005\112\006\103\007\106\010\105" +
    "\011\107\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa\020" +
    "\115\021\116\025\uffaa\026\uffaa\031\uffaa\033\uffaa\053\uffaa" +
    "\001\002\000\046\004\uffab\005\112\006\103\007\106\010" +
    "\105\011\107\012\uffab\013\uffab\014\uffab\020\115\021\116" +
    "\022\110\023\120\025\uffab\026\uffab\031\uffab\033\uffab\053" +
    "\uffab\001\002\000\046\004\uffa7\005\112\006\103\007\106" +
    "\010\105\011\107\012\uffa7\013\uffa7\014\uffa7\016\uffa7\017" +
    "\uffa7\022\uffa7\023\uffa7\025\uffa7\026\uffa7\031\uffa7\033\uffa7" +
    "\053\uffa7\001\002\000\046\004\uffa9\005\112\006\103\007" +
    "\106\010\105\011\107\012\uffa9\013\uffa9\014\uffa9\016\uffa9" +
    "\017\uffa9\022\uffa9\023\uffa9\025\uffa9\026\uffa9\031\uffa9\033" +
    "\uffa9\053\uffa9\001\002\000\052\004\uffad\005\112\006\103" +
    "\007\106\010\105\011\107\012\121\013\uffad\014\122\016" +
    "\111\017\117\020\115\021\116\022\110\023\120\025\uffad" +
    "\026\uffad\031\uffad\033\uffad\053\uffad\001\002\000\052\004" +
    "\uffb4\005\uffb4\006\uffb4\007\106\010\105\011\107\012\uffb4" +
    "\013\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\025\uffb4\026\uffb4\031\uffb4\033\uffb4\053\uffb4" +
    "\001\002\000\046\004\uffac\005\112\006\103\007\106\010" +
    "\105\011\107\012\uffac\013\uffac\014\uffac\020\115\021\116" +
    "\022\110\023\120\025\uffac\026\uffac\031\uffac\033\uffac\053" +
    "\uffac\001\002\000\046\004\uffa8\005\112\006\103\007\106" +
    "\010\105\011\107\012\uffa8\013\uffa8\014\uffa8\016\uffa8\017" +
    "\uffa8\020\115\021\116\025\uffa8\026\uffa8\031\uffa8\033\uffa8" +
    "\053\uffa8\001\002\000\052\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\025\uffb0\026" +
    "\uffb0\031\uffb0\033\uffb0\053\uffb0\001\002\000\052\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\025\uffb2\026\uffb2\031\uffb2\033\uffb2\053\uffb2\001" +
    "\002\000\052\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\025\uffb1\026\uffb1\031\uffb1" +
    "\033\uffb1\053\uffb1\001\002\000\052\004\uffa6\005\112\006" +
    "\103\007\106\010\105\011\107\012\121\013\113\014\122" +
    "\016\111\017\117\020\115\021\116\022\110\023\120\025" +
    "\uffa6\026\uffa6\031\uffa6\033\uffa6\053\uffa6\001\002\000\052" +
    "\004\uffb3\005\uffb3\006\uffb3\007\106\010\105\011\107\012" +
    "\uffb3\013\uffb3\014\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\025\uffb3\026\uffb3\031\uffb3\033\uffb3\053" +
    "\uffb3\001\002\000\052\004\uff9d\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\025\uff9d\026\uff9d" +
    "\031\uff9d\033\uff9d\053\uff9d\001\002\000\056\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1" +
    "\014\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\025\uffa1\026\uffa1\031\uffa1\032\076\033\uffa1\052\100" +
    "\053\uffa1\001\002\000\072\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\025\uff8e\026" +
    "\uff8e\031\uff8e\032\uff8e\033\uff8e\052\uff8e\053\uff8e\061\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\001\002\000" +
    "\052\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\016\uff9c\017\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\025\uff9c\026\uff9c\031\uff9c\033\uff9c" +
    "\053\uff9c\001\002\000\044\005\112\006\103\007\106\010" +
    "\105\011\107\012\121\013\113\014\122\016\111\017\117" +
    "\020\115\021\116\022\110\023\120\025\104\026\123\031" +
    "\154\001\002\000\004\031\152\001\002\000\040\006\066" +
    "\015\064\024\056\030\062\035\057\055\065\056\060\107" +
    "\052\111\063\112\071\113\054\114\070\115\061\116\074" +
    "\117\053\001\002\000\052\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\016\uff98" +
    "\017\uff98\020\uff98\021\uff98\022\uff98\023\uff98\025\uff98\026" +
    "\uff98\031\uff98\033\uff98\053\uff98\001\002\000\052\004\uffa4" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\025\uffa4\026\uffa4\031\uffa4\033\uffa4\053\uffa4\001" +
    "\002\000\056\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\025\uffa2\026\uffa2\031\uffa2" +
    "\032\076\033\uffa2\052\100\053\uffa2\001\002\000\040\006" +
    "\066\015\064\024\056\030\062\035\057\055\065\056\060" +
    "\107\052\111\063\112\071\113\054\114\070\115\061\116" +
    "\074\117\053\001\002\000\046\005\112\006\103\007\106" +
    "\010\105\011\107\012\121\013\113\014\122\016\111\017" +
    "\117\020\115\021\116\022\110\023\120\025\104\026\123" +
    "\031\uffc3\053\162\001\002\000\004\031\161\001\002\000" +
    "\052\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\025\uffc4\026\uffc4\031\uffc4\033\uffc4" +
    "\053\uffc4\001\002\000\040\006\066\015\064\024\056\030" +
    "\062\035\057\055\065\056\060\107\052\111\063\112\071" +
    "\113\054\114\070\115\061\116\074\117\053\001\002\000" +
    "\004\031\uffc2\001\002\000\052\004\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\016" +
    "\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\025\uff9b" +
    "\026\uff9b\031\uff9b\033\uff9b\053\uff9b\001\002\000\004\004" +
    "\166\001\002\000\052\035\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8\067\uffb8\071" +
    "\uffb8\072\uffb8\073\uffb8\074\uffb8\101\uffb8\102\uffb8\103\uffb8" +
    "\105\uffb8\110\uffb8\121\uffb8\001\002\000\022\035\171\041" +
    "\014\042\011\043\027\044\046\045\041\046\015\047\025" +
    "\001\002\000\004\031\172\001\002\000\010\031\uff8f\034" +
    "\uff8f\035\uff8f\001\002\000\052\004\uff99\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\025\uff99" +
    "\026\uff99\031\uff99\033\uff99\053\uff99\001\002\000\006\004" +
    "\uffb6\035\146\001\002\000\004\004\uffb5\001\002\000\004" +
    "\004\176\001\002\000\040\006\066\015\064\024\056\030" +
    "\062\035\057\055\065\056\060\107\052\111\063\112\071" +
    "\113\054\114\070\115\061\116\074\117\053\001\002\000" +
    "\044\004\200\005\112\006\103\007\106\010\105\011\107" +
    "\012\121\013\113\014\122\016\111\017\117\020\115\021" +
    "\116\022\110\023\120\025\104\026\123\001\002\000\042" +
    "\006\066\015\064\024\056\030\062\031\202\035\057\055" +
    "\065\056\060\107\052\111\063\112\071\113\054\114\070" +
    "\115\061\116\074\117\053\001\002\000\044\005\112\006" +
    "\103\007\106\010\105\011\107\012\121\013\113\014\122" +
    "\016\111\017\117\020\115\021\116\022\110\023\120\025" +
    "\104\026\123\031\224\001\002\000\004\100\005\001\002" +
    "\000\004\031\221\001\002\000\070\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\026" +
    "\uffa3\031\uffa3\032\076\052\100\055\077\056\075\061\211" +
    "\062\206\063\205\064\212\065\207\066\210\001\002\000" +
    "\040\006\066\015\064\024\056\030\062\035\057\055\065" +
    "\056\060\107\052\111\063\112\071\113\054\114\070\115" +
    "\061\116\074\117\053\001\002\000\040\006\066\015\064" +
    "\024\056\030\062\035\057\055\065\056\060\107\052\111" +
    "\063\112\071\113\054\114\070\115\061\116\074\117\053" +
    "\001\002\000\040\006\066\015\064\024\056\030\062\035" +
    "\057\055\065\056\060\107\052\111\063\112\071\113\054" +
    "\114\070\115\061\116\074\117\053\001\002\000\040\006" +
    "\066\015\064\024\056\030\062\035\057\055\065\056\060" +
    "\107\052\111\063\112\071\113\054\114\070\115\061\116" +
    "\074\117\053\001\002\000\040\006\066\015\064\024\056" +
    "\030\062\035\057\055\065\056\060\107\052\111\063\112" +
    "\071\113\054\114\070\115\061\116\074\117\053\001\002" +
    "\000\040\006\066\015\064\024\056\030\062\035\057\055" +
    "\065\056\060\107\052\111\063\112\071\113\054\114\070" +
    "\115\061\116\074\117\053\001\002\000\046\004\uffc7\005" +
    "\112\006\103\007\106\010\105\011\107\012\121\013\113" +
    "\014\122\016\111\017\117\020\115\021\116\022\110\023" +
    "\120\025\104\026\123\031\uffc7\001\002\000\046\004\uffca" +
    "\005\112\006\103\007\106\010\105\011\107\012\121\013" +
    "\113\014\122\016\111\017\117\020\115\021\116\022\110" +
    "\023\120\025\104\026\123\031\uffca\001\002\000\046\004" +
    "\uffc5\005\112\006\103\007\106\010\105\011\107\012\121" +
    "\013\113\014\122\016\111\017\117\020\115\021\116\022" +
    "\110\023\120\025\104\026\123\031\uffc5\001\002\000\046" +
    "\004\uffc6\005\112\006\103\007\106\010\105\011\107\012" +
    "\121\013\113\014\122\016\111\017\117\020\115\021\116" +
    "\022\110\023\120\025\104\026\123\031\uffc6\001\002\000" +
    "\046\004\uffc9\005\112\006\103\007\106\010\105\011\107" +
    "\012\121\013\113\014\122\016\111\017\117\020\115\021" +
    "\116\022\110\023\120\025\104\026\123\031\uffc9\001\002" +
    "\000\046\004\uffc8\005\112\006\103\007\106\010\105\011" +
    "\107\012\121\013\113\014\122\016\111\017\117\020\115" +
    "\021\116\022\110\023\120\025\104\026\123\031\uffc8\001" +
    "\002\000\004\100\005\001\002\000\052\035\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\051" +
    "\uffbb\067\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\101\uffbb" +
    "\102\uffbb\103\uffbb\105\uffbb\110\uffbb\121\uffbb\001\002\000" +
    "\052\035\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\051\uffb9\067\uffb9\071\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\101\uffb9\102\uffb9\103\uffb9\105\uffb9\110\uffb9" +
    "\121\uffb9\001\002\000\004\100\005\001\002\000\052\035" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\051\uffba\067\uffba\071\uffba\072\uffba\073\uffba\074" +
    "\uffba\101\uffba\102\uffba\103\uffba\105\uffba\110\uffba\121\uffba" +
    "\001\002\000\052\035\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\051\uffd4\067\uffd4\071\uffd4" +
    "\072\uffd4\073\uffd4\074\uffd4\101\uffd4\102\uffd4\103\uffd4\105" +
    "\uffd4\110\uffd4\121\uffd4\001\002\000\006\034\242\035\uffef" +
    "\001\002\000\004\035\uffe7\001\002\000\004\035\232\001" +
    "\002\000\004\061\235\001\002\000\004\004\234\001\002" +
    "\000\052\035\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\051\uffe6\067\uffe6\071\uffe6\072\uffe6" +
    "\073\uffe6\074\uffe6\101\uffe6\102\uffe6\103\uffe6\105\uffe6\110" +
    "\uffe6\121\uffe6\001\002\000\040\006\066\015\064\024\056" +
    "\030\062\035\057\055\065\056\060\107\052\111\063\112" +
    "\071\113\054\114\070\115\061\116\074\117\053\001\002" +
    "\000\046\004\uffe2\005\112\006\103\007\106\010\105\011" +
    "\107\012\121\013\113\014\122\016\111\017\117\020\115" +
    "\021\116\022\110\023\120\025\104\026\123\053\237\001" +
    "\002\000\004\035\232\001\002\000\004\004\uffe3\001\002" +
    "\000\004\035\uffeb\001\002\000\006\034\242\035\uffef\001" +
    "\002\000\004\035\ufff0\001\002\000\004\035\232\001\002" +
    "\000\004\004\246\001\002\000\052\035\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\051\uffea" +
    "\067\uffea\071\uffea\072\uffea\073\uffea\074\uffea\101\uffea\102" +
    "\uffea\103\uffea\105\uffea\110\uffea\121\uffea\001\002\000\052" +
    "\035\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\051\uffd1\067\uffd1\071\uffd1\072\uffd1\073\uffd1" +
    "\074\uffd1\101\uffd1\102\uffd1\103\uffd1\105\uffd1\110\uffd1\121" +
    "\uffd1\001\002\000\052\035\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\067\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\101\uffcc\102\uffcc\103\uffcc" +
    "\105\uffcc\110\uffcc\121\uffcc\001\002\000\004\035\232\001" +
    "\002\000\004\004\253\001\002\000\052\035\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\051" +
    "\uffe4\067\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\101\uffe4" +
    "\102\uffe4\103\uffe4\105\uffe4\110\uffe4\121\uffe4\001\002\000" +
    "\004\035\255\001\002\000\004\106\256\001\002\000\040" +
    "\006\066\015\064\024\056\030\062\035\057\055\065\056" +
    "\060\107\052\111\063\112\071\113\054\114\070\115\061" +
    "\116\074\117\053\001\002\000\044\005\112\006\103\007" +
    "\106\010\105\011\107\012\121\013\113\014\122\016\111" +
    "\017\117\020\115\021\116\022\110\023\120\025\104\026" +
    "\123\031\260\001\002\000\004\100\005\001\002\000\052" +
    "\035\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\051\uffb7\067\uffb7\071\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\101\uffb7\102\uffb7\103\uffb7\105\uffb7\110\uffb7\121" +
    "\uffb7\001\002\000\042\006\066\015\064\024\056\030\062" +
    "\031\264\035\057\055\065\056\060\107\052\111\063\112" +
    "\071\113\054\114\070\115\061\116\074\117\053\001\002" +
    "\000\044\005\112\006\103\007\106\010\105\011\107\012" +
    "\121\013\113\014\122\016\111\017\117\020\115\021\116" +
    "\022\110\023\120\025\104\026\123\031\266\001\002\000" +
    "\004\004\265\001\002\000\052\035\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\067" +
    "\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\101\uffd2\102\uffd2" +
    "\103\uffd2\105\uffd2\110\uffd2\121\uffd2\001\002\000\004\004" +
    "\267\001\002\000\052\035\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\067\uffd3\071" +
    "\uffd3\072\uffd3\073\uffd3\074\uffd3\101\uffd3\102\uffd3\103\uffd3" +
    "\105\uffd3\110\uffd3\121\uffd3\001\002\000\004\101\271\001" +
    "\002\000\064\002\uffda\035\uffda\041\uffda\042\uffda\043\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\051\uffda\067\uffda\070" +
    "\uffda\071\uffda\072\uffda\073\uffda\074\uffda\076\uffda\077\uffda" +
    "\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\110\uffda\121" +
    "\uffda\001\002\000\004\035\uffe9\001\002\000\004\035\275" +
    "\001\002\000\004\004\304\001\002\000\010\004\uffe0\053" +
    "\276\061\277\001\002\000\004\035\275\001\002\000\040" +
    "\006\066\015\064\024\056\030\062\035\057\055\065\056" +
    "\060\107\052\111\063\112\071\113\054\114\070\115\061" +
    "\116\074\117\053\001\002\000\046\004\uffde\005\112\006" +
    "\103\007\106\010\105\011\107\012\121\013\113\014\122" +
    "\016\111\017\117\020\115\021\116\022\110\023\120\025" +
    "\104\026\123\053\301\001\002\000\004\035\275\001\002" +
    "\000\004\004\uffdf\001\002\000\004\004\uffe1\001\002\000" +
    "\052\035\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\051\uffe8\067\uffe8\071\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\101\uffe8\102\uffe8\103\uffe8\105\uffe8\110\uffe8" +
    "\121\uffe8\001\002\000\040\006\066\015\064\024\056\030" +
    "\062\035\057\055\065\056\060\107\052\111\063\112\071" +
    "\113\054\114\070\115\061\116\074\117\053\001\002\000" +
    "\044\005\112\006\103\007\106\010\105\011\107\012\121" +
    "\013\113\014\122\016\111\017\117\020\115\021\116\022" +
    "\110\023\120\025\104\026\123\031\307\001\002\000\004" +
    "\100\005\001\002\000\054\035\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\067\uffc0" +
    "\070\311\071\uffc0\072\uffc0\073\uffc0\074\uffc0\101\uffc0\102" +
    "\uffc0\103\uffc0\105\uffc0\110\uffc0\121\uffc0\001\002\000\004" +
    "\100\005\001\002\000\052\035\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1\067\uffc1" +
    "\071\uffc1\072\uffc1\073\uffc1\074\uffc1\101\uffc1\102\uffc1\103" +
    "\uffc1\105\uffc1\110\uffc1\121\uffc1\001\002\000\040\006\066" +
    "\015\064\024\056\030\062\035\057\055\065\056\060\107" +
    "\052\111\063\112\071\113\054\114\070\115\061\116\074" +
    "\117\053\001\002\000\044\005\112\006\103\007\106\010" +
    "\105\011\107\012\121\013\113\014\122\016\111\017\117" +
    "\020\115\021\116\022\110\023\120\025\104\026\123\031" +
    "\315\001\002\000\004\075\316\001\002\000\004\054\317" +
    "\001\002\000\004\100\320\001\002\000\010\076\322\077" +
    "\uffbd\101\uffbd\001\002\000\006\077\327\101\330\001\002" +
    "\000\004\111\323\001\002\000\004\054\324\001\002\000" +
    "\004\100\005\001\002\000\010\076\322\077\uffbd\101\uffbd" +
    "\001\002\000\006\077\uffbc\101\uffbc\001\002\000\004\054" +
    "\331\001\002\000\052\035\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\067\uffbe\071" +
    "\uffbe\072\uffbe\073\uffbe\074\uffbe\101\uffbe\102\uffbe\103\uffbe" +
    "\105\uffbe\110\uffbe\121\uffbe\001\002\000\004\100\005\001" +
    "\002\000\004\101\333\001\002\000\052\035\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\051" +
    "\uffbf\067\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\101\uffbf" +
    "\102\uffbf\103\uffbf\105\uffbf\110\uffbf\121\uffbf\001\002\000" +
    "\004\101\uffd7\001\002\000\052\035\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\051\uffce\067" +
    "\uffce\071\uffce\072\uffce\073\uffce\074\uffce\101\uffce\102\uffce" +
    "\103\uffce\105\uffce\110\uffce\121\uffce\001\002\000\044\004" +
    "\337\005\112\006\103\007\106\010\105\011\107\012\121" +
    "\013\113\014\122\016\111\017\117\020\115\021\116\022" +
    "\110\023\120\025\104\026\123\001\002\000\052\035\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\051\uffcd\067\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd" +
    "\101\uffcd\102\uffcd\103\uffcd\105\uffcd\110\uffcd\121\uffcd\001" +
    "\002\000\052\035\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\051\uffcb\067\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\101\uffcb\102\uffcb\103\uffcb\105\uffcb" +
    "\110\uffcb\121\uffcb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\006\014\005\036\003\001\001\000\002\001" +
    "\001\000\004\043\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\041\005\036\006\037\007\022\010" +
    "\033\011\034\012\025\013\012\015\016\016\023\023\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\072" +
    "\005\066\034\335\035\071\001\001\000\030\003\041\005" +
    "\036\006\037\007\022\010\033\011\034\012\025\013\012" +
    "\015\016\016\333\023\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\271\001\001" +
    "\000\004\044\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\037\007\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\072\005\066\034\054\035\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\072\005\066\034\163" +
    "\035\071\001\001\000\002\001\001\000\004\005\154\001" +
    "\001\000\002\001\001\000\014\003\072\005\066\006\150" +
    "\034\147\035\071\001\001\000\002\001\001\000\012\003" +
    "\072\005\066\034\146\035\071\001\001\000\004\005\144" +
    "\001\001\000\012\003\072\005\066\034\143\035\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\072\005\066\034\101\035\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\072\005\066\034\142" +
    "\035\071\001\001\000\012\003\072\005\066\034\141\035" +
    "\071\001\001\000\012\003\072\005\066\034\140\035\071" +
    "\001\001\000\012\003\072\005\066\034\137\035\071\001" +
    "\001\000\012\003\072\005\066\034\136\035\071\001\001" +
    "\000\012\003\072\005\066\034\135\035\071\001\001\000" +
    "\012\003\072\005\066\034\134\035\071\001\001\000\012" +
    "\003\072\005\066\034\133\035\071\001\001\000\012\003" +
    "\072\005\066\034\132\035\071\001\001\000\002\001\001" +
    "\000\012\003\072\005\066\034\131\035\071\001\001\000" +
    "\012\003\072\005\066\034\130\035\071\001\001\000\012" +
    "\003\072\005\066\034\127\035\071\001\001\000\012\003" +
    "\072\005\066\034\126\035\071\001\001\000\012\003\072" +
    "\005\066\034\125\035\071\001\001\000\012\003\072\005" +
    "\066\034\124\035\071\001\001\000\012\003\072\005\066" +
    "\034\123\035\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\072\005\066\034\152\035\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\072\004\157\005\066\034\156\035\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\072\004\162\005\066\034\156\035\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\037\007\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\036\010\173\020\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\072\005\066\034\176\035" +
    "\071\001\001\000\002\001\001\000\014\003\072\005\203" +
    "\010\202\034\200\035\071\001\001\000\002\001\001\000" +
    "\004\014\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\072\005\066\034\217\035\071\001\001\000" +
    "\012\003\072\005\066\034\216\035\071\001\001\000\012" +
    "\003\072\005\066\034\215\035\071\001\001\000\012\003" +
    "\072\005\066\034\214\035\071\001\001\000\012\003\072" +
    "\005\066\034\213\035\071\001\001\000\012\003\072\005" +
    "\066\034\212\035\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\240\001\001" +
    "\000\004\041\230\001\001\000\004\021\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\072\005\066\034\235\035\071\001\001\000\002\001" +
    "\001\000\004\021\237\001\001\000\002\001\001\000\004" +
    "\037\243\001\001\000\004\033\242\001\001\000\002\001" +
    "\001\000\004\021\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\072\005\066\034" +
    "\256\035\071\001\001\000\002\001\001\000\004\014\260" +
    "\001\001\000\002\001\001\000\012\003\072\005\066\034" +
    "\262\035\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\272\001\001" +
    "\000\004\022\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\302\001\001\000\012\003\072\005\066" +
    "\034\277\035\071\001\001\000\002\001\001\000\004\022" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\072\005\066\034\305\035\071\001" +
    "\001\000\002\001\001\000\004\014\307\001\001\000\002" +
    "\001\001\000\004\014\311\001\001\000\002\001\001\000" +
    "\012\003\072\005\066\034\313\035\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\324\001\001\000" +
    "\004\017\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static List<Expression> list = new ArrayList<>();
    public static ArrayDeque<Object> semanticStack = new ArrayDeque<>();
    public static Object finalR;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begining EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= var_dcl program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_dcl program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= extern_dcl program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= struct_dcl program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // extern_dcl ::= EXTERN typeName IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("extern_dcl",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_dcl ::= FUNCTION typeName func_signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dcl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_dcl ::= FUNCTION VOID func_signature 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_dcl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_signature ::= IDENTIFIER LPAREN arguments RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_signature",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_signature ::= IDENTIFIER LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_signature",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func_signature ::= IDENTIFIER LPAREN arguments RPAREN block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_signature",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_signature ::= IDENTIFIER LPAREN RPAREN block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_signature",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arguments ::= argument COMMA arguments 
            {
              Object RESULT =null;
		 System.out.println("argument detected"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arguments ::= argument 
            {
              Object RESULT =null;
		 System.out.println("argument detected"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argument ::= typeName IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argument ::= typeName IDENTIFIER array_part_no_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // array_part_no_val ::= LRBRACKET array_part_no_val 
            {
              Integer RESULT =null;
		int countleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int countright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer count = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 1 + count; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part_no_val",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // array_part_no_val ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_part_no_val",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // struct_dcl ::= RECORD IDENTIFIER BEGIN var_declrations END RECORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct_dcl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_declrations ::= var_dcl var_declrations 
            {
              List<VariableDCLFactory> RESULT =null;
		int otherleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int otherright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<VariableDCLFactory> other = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<VariableDCLFactory> list = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if (list == null)
                            list = new ArrayList<VariableDCLFactory>();
                        list.addAll(other == null ? new ArrayList<>() : other);
                        RESULT = list;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declrations",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_declrations ::= var_dcl 
            {
              List<VariableDCLFactory> RESULT =null;
		int otherleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int otherright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<VariableDCLFactory> other = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = other; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declrations",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              List<VariableDCLFactory> RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimensionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimensionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer dimensions = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        Parser.semanticStack.addLast(VariableDCLFactory.create()
                                                        .setConstant(true)
                                                        .setTypeName(typeName)
                                                        .setDimensions(dimensions));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_dcl ::= CONST typeName array_part_no_val NT$0 const_var_dcl_p SEMICOLON 
            {
              List<VariableDCLFactory> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (List<VariableDCLFactory>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dimensionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimensionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer dimensions = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<VariableDCLFactory> list = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Parser.semanticStack.removeLast();
                        RESULT = list;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$1 ::= 
            {
              List<VariableDCLFactory> RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dimensionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dimensionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer dimensions = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

                        Parser.semanticStack.addLast(VariableDCLFactory.create()
                                                        .setConstant(false)
                                                        .setTypeName(typeName)
                                                        .setDimensions(dimensions));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_dcl ::= typeName array_part_no_val NT$1 var_dcl_p SEMICOLON 
            {
              List<VariableDCLFactory> RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (List<VariableDCLFactory>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dimensionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimensionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer dimensions = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<VariableDCLFactory> list = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Parser.semanticStack.removeLast();
                        RESULT = list;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              List<VariableDCLFactory> RESULT =null;

                        Parser.semanticStack.addLast(VariableDCLFactory.create()
                                                        .setConstant(true)
                                                        .setTypeName(TypeTree.AUTO_NAME));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_dcl ::= CONST AUTO NT$2 const_var_dcl_p SEMICOLON 
            {
              List<VariableDCLFactory> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (List<VariableDCLFactory>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<VariableDCLFactory> list = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Parser.semanticStack.removeLast();
                        RESULT = list;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              List<VariableDCLFactory> RESULT =null;

                        Parser.semanticStack.addLast(VariableDCLFactory.create()
                                                        .setConstant(false)
                                                        .setTypeName(TypeTree.AUTO_NAME));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_dcl ::= AUTO NT$3 const_var_dcl_p SEMICOLON 
            {
              List<VariableDCLFactory> RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (List<VariableDCLFactory>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<VariableDCLFactory> list = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Parser.semanticStack.removeLast();
                        RESULT = list;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // const_var_dcl_p ::= IDENTIFIER DIRECT_ASSIGN expr COMMA const_var_dcl_p 
            {
              List<VariableDCLFactory> RESULT =null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String variableName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<VariableDCLFactory> list = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if (list == null)
                            list = new ArrayList<VariableDCLFactory>();
                        VariableDCLFactory factory = (VariableDCLFactory) Parser.semanticStack.getLast();
                        list.add(factory.copy().setVariableName(variableName).setDefaultValue(e));
                        RESULT = list;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_var_dcl_p",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // const_var_dcl_p ::= IDENTIFIER DIRECT_ASSIGN expr 
            {
              List<VariableDCLFactory> RESULT =null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String variableName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        VariableDCLFactory factory = (VariableDCLFactory) Parser.semanticStack.getLast();
                        RESULT = new ArrayList<VariableDCLFactory>();
                        RESULT.add(factory.copy().setVariableName(variableName).setDefaultValue(e));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_var_dcl_p",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_dcl_p ::= IDENTIFIER COMMA var_dcl_p 
            {
              List<VariableDCLFactory> RESULT =null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String variableName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<VariableDCLFactory> list = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if (list == null)
                            list = new ArrayList<VariableDCLFactory>();
                        VariableDCLFactory factory = (VariableDCLFactory) Parser.semanticStack.getLast();
                        list.add(factory.copy().setVariableName(variableName));
                        RESULT = list;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_p",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_dcl_p ::= IDENTIFIER 
            {
              List<VariableDCLFactory> RESULT =null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String variableName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        VariableDCLFactory factory = (VariableDCLFactory) Parser.semanticStack.getLast();
                        RESULT = new ArrayList<VariableDCLFactory>();
                        RESULT.add(factory.copy().setVariableName(variableName));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_p",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_dcl_p ::= IDENTIFIER DIRECT_ASSIGN expr COMMA var_dcl_p 
            {
              List<VariableDCLFactory> RESULT =null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String variableName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<VariableDCLFactory> list = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if (list == null)
                            list = new ArrayList<VariableDCLFactory>();
                        VariableDCLFactory factory = (VariableDCLFactory) Parser.semanticStack.getLast();
                        list.add(factory.copy().setVariableName(variableName).setDefaultValue(e));
                        RESULT = list;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_p",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_dcl_p ::= IDENTIFIER DIRECT_ASSIGN expr 
            {
              List<VariableDCLFactory> RESULT =null;
		int variableNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int variableNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String variableName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        VariableDCLFactory factory = (VariableDCLFactory) Parser.semanticStack.getLast();
                        RESULT = new ArrayList<VariableDCLFactory>();
                        RESULT.add(factory.copy().setVariableName(variableName).setDefaultValue(e));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_dcl_p",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // begining ::= block 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 finalR = bl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begining",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$4 ::= 
            {
              Block RESULT =null;
 Parser.semanticStack.addLast(new Block()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$5 ::= 
            {
              Block RESULT =(Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 RESULT = (Block) Parser.semanticStack.removeLast(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // block ::= BEGIN NT$4 block_part NT$5 END 
            {
              Block RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Block) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // block ::= BEGIN END 
            {
              Block RESULT =null;
		 RESULT = new Block(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // block_part ::= block_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_part",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // block_part ::= block_body block_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_part",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // block_body ::= var_dcl 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<VariableDCLFactory> list = (List<VariableDCLFactory>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Block currentBlock = (Block) Parser.semanticStack.getLast();
                        for (VariableDCLFactory variableDCLFactory : list) {
                            currentBlock.addBlockCodes(variableDCLFactory.createMethodVariable());
                        }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // block_body ::= statement 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Block currentBlock = (Block) Parser.semanticStack.getLast();
                        currentBlock.addBlockCode(stat);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // block_body ::= method_cal SEMICOLON 
            {
              Object RESULT =null;
		int methodCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int methodCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression methodCall = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Block currentBlock = (Block) Parser.semanticStack.getLast();
                        ((MethodCall) methodCall).setDiscardResult(true);
                        currentBlock.addBlockCode((BlockCode) methodCall);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // block_body ::= PRINTLN LPAREN expr RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        Block currentBlock = (Block) Parser.semanticStack.getLast();
                        currentBlock.addBlockCode(new PrintFunction(e));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // block_body ::= PRINTLN LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;
		
                        Block currentBlock = (Block) Parser.semanticStack.getLast();
                        currentBlock.addBlockCode(new PrintFunction());
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= assignment SEMICOLON 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= cond_stmt 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= loop_stmt 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= RETURN SEMICOLON 
            {
              Statement RESULT =null;
		 System.out.println("return stat"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= RETURN expr SEMICOLON 
            {
              Statement RESULT =null;
		 System.out.println("return expr stat"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= BREAK SEMICOLON 
            {
              Statement RESULT =null;
		 System.out.println("break"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		 System.out.println("continue"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignment ::= variable DIRECT_ASSIGN expr 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DirectAssignment(var, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assignment ::= variable SUM_ASSIGN expr 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusAssignment(var, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assignment ::= variable DIFF_ASSIGN expr 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusAssignment(var, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment ::= variable MULT_ASSIGN expr 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MultiplyAssignment(var, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assignment ::= variable DIVIDE_ASSIGN expr 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DivideAssignment(var, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignment ::= variable MOD_ASSIGN expr 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReminderAssignment(var, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // method_cal ::= IDENTIFIER LPAREN parameters RPAREN 
            {
              Expression RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parmsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parmsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expression> parms = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MethodCall(methodName, parms); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_cal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parameters ::= expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = new ArrayList<Expression>();
                        RESULT.add(e);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parameters ::= expr COMMA parameters 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expression> list = (List<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        list.add(e);
                        RESULT = list;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond_stmt ::= IF LPAREN expr RPAREN block ELSE block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mainBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mainBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block mainBody = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block elseBody = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfElseThen(e, mainBody, elseBody); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cond_stmt ::= IF LPAREN expr RPAREN block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mainBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block mainBody = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfElseThen(e, mainBody, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cond_stmt ::= SWITCH LPAREN expr RPAREN OF COLON BEGIN case_part DEFAULT COLON block END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<Case> cases = (List<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int defaultBlockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int defaultBlockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block defaultBlock = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Switch(e, cases, defaultBlock); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cond_stmt ::= SWITCH LPAREN expr RPAREN OF COLON BEGIN case_part END 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Case> cases = (List<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Switch(e, cases, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case_part ::= 
            {
              List<Case> RESULT =null;
		
                        RESULT = new ArrayList<Case>();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case_part ::= CASE INT_CONST COLON block case_part 
            {
              List<Case> RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Case> list = (List<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        list.add(new Case(number, body));
                        RESULT = list;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_part",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // loop_stmt ::= FOR LPAREN for_init_part SEMICOLON expr SEMICOLON assignment RPAREN block 
            {
              Statement RESULT =null;
		int initialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int initialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Statement initial = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stepAssignmentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stepAssignmentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement stepAssignment = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForLoop(initial, e, stepAssignment, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // loop_stmt ::= FOR LPAREN for_init_part SEMICOLON expr SEMICOLON expr RPAREN block 
            {
              Statement RESULT =null;
		int initialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int initialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Statement initial = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stepExprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stepExprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression stepExpr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForLoop(initial, e, stepExpr, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // loop_stmt ::= FOR LPAREN for_init_part SEMICOLON expr SEMICOLON RPAREN block 
            {
              Statement RESULT =null;
		int initialleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int initialright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Statement initial = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ForLoop(initial, e, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // loop_stmt ::= REPEAT block UNTIL LPAREN expr RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		 System.out.println("repeat stat"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // loop_stmt ::= FOREACH LPAREN IDENTIFIER IN expr RPAREN block 
            {
              Statement RESULT =null;
		 System.out.println("foreach stat"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // for_init_part ::= 
            {
              Statement RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init_part",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for_init_part ::= assignment 
            {
              Statement RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_init_part",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr MULTIPLY expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Multiply(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Divide(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr MOD expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Reminder(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr BITWISE_AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BitwiseAnd(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr BITWISE_XOR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BitwiseXOR(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr BITWISE_OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BitwiseOr(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Equal(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NotEqual(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr GREATER_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new GreaterEqual(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= expr LESS_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessEqual(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= expr GREATER expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Greater(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= expr LESS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Less(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Or(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= MINUSMINUS variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MinusMinusPrefix(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= PLUSPLUS variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PlusPlusPrefix(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= variable MINUSMINUS 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new MinusMinusPostfix(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= variable PLUSPLUS 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PlusPlusPostfix(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= method_cal 
            {
              Expression RESULT =null;
		 System.out.println("method call"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Neg(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= BITWISE_NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BitwiseNot(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= const_val 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= SIZEOF LPAREN typeName RPAREN 
            {
              Expression RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Sizeof(typeName); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= LPAREN base_type RPAREN expr 
            {
              Expression RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cast(typeName, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // base_type ::= INT 
            {
              String RESULT =null;
		 RESULT = TypeTree.INTEGER_NAME; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // base_type ::= LONG 
            {
              String RESULT =null;
		 RESULT = TypeTree.LONG_NAME; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // base_type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = TypeTree.FLOAT_NAME; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // base_type ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT = TypeTree.DOUBLE_NAME; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // base_type ::= BOOL 
            {
              String RESULT =null;
		 RESULT = TypeTree.BOOLEAN_NAME; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // base_type ::= CHAR 
            {
              String RESULT =null;
		 RESULT = TypeTree.CHAR_NAME; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // base_type ::= STRING 
            {
              String RESULT =null;
		 RESULT = TypeTree.STRING_NAME; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // typeName ::= base_type 
            {
              String RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = typeName; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeName",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // typeName ::= IDENTIFIER 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = name; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeName",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // variable ::= IDENTIFIER 
            {
              Variable RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SimpleVariable(name); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // variable ::= variable LBRACKET expr RBRACKET 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int requestedDimensionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int requestedDimensionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression requestedDimension = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayVariable(var, requestedDimension); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // variable ::= variable DOT IDENTIFIER 
            {
              Variable RESULT =null;
		int parentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Variable parent = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int memberNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int memberNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String memberName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MemberVariable(parent, memberName); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // const_val ::= INT_CONST 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerConst(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // const_val ::= LONG_CONST 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Long val = (Long)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LongConst(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // const_val ::= DOUBLE_CONST 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DoubleConst(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // const_val ::= FLOAT_CONST 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FloatConst(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // const_val ::= CHAR_CONST 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharConst(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // const_val ::= BOOL_CONST 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanConst(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // const_val ::= STRING_CONST 
            {
              Expression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringConst(val); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_val",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
