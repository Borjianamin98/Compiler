/* The following code was generated by JFlex 1.7.0 */

package lexical;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import syntax.ParserSym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Scanner.flex</tt>
 */
public class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\36\1\3\1\2\1\5\1\6\1\1\16\36\4\0\1\66\1\41"+
    "\1\65\1\4\1\35\1\43\1\47\1\64\1\50\1\50\1\43\1\44"+
    "\1\50\1\45\1\54\1\46\1\55\7\61\2\56\1\53\1\50\1\43"+
    "\1\40\1\42\1\50\1\0\4\60\1\62\1\70\5\35\1\67\13\35"+
    "\1\57\2\35\1\51\1\63\1\52\1\47\1\35\1\0\1\21\1\23"+
    "\1\12\1\25\1\17\1\7\1\24\1\26\1\14\1\35\1\33\1\22"+
    "\1\35\1\11\1\15\1\20\1\35\1\16\1\27\1\13\1\10\1\30"+
    "\1\31\1\32\1\35\1\34\1\50\1\47\1\50\1\47\6\36\1\37"+
    "\32\36\2\0\4\35\4\0\1\35\2\0\1\36\7\0\1\35\4\0"+
    "\1\35\5\0\27\35\1\0\37\35\1\0\u01ca\35\4\0\14\35\16\0"+
    "\5\35\7\0\1\35\1\0\1\35\21\0\160\36\5\35\1\0\2\35"+
    "\2\0\4\35\10\0\1\35\1\0\3\35\1\0\1\35\1\0\24\35"+
    "\1\0\123\35\1\0\213\35\1\0\5\36\2\0\236\35\11\0\46\35"+
    "\2\0\1\35\7\0\47\35\7\0\1\35\1\0\55\36\1\0\1\36"+
    "\1\0\2\36\1\0\2\36\1\0\1\36\10\0\33\35\5\0\3\35"+
    "\15\0\5\36\6\0\1\35\4\0\13\36\5\0\53\35\37\36\4\0"+
    "\2\35\1\36\143\35\1\0\1\35\10\36\1\0\6\36\2\35\2\36"+
    "\1\0\4\36\2\35\12\36\3\35\2\0\1\35\17\0\1\36\1\35"+
    "\1\36\36\35\33\36\2\0\131\35\13\36\1\35\16\0\12\36\41\35"+
    "\11\36\2\35\4\0\1\35\5\0\26\35\4\36\1\35\11\36\1\35"+
    "\3\36\1\35\5\36\22\0\31\35\3\36\104\0\1\35\1\0\13\35"+
    "\67\0\33\36\1\0\4\36\66\35\3\36\1\35\22\36\1\35\7\36"+
    "\12\35\2\36\2\0\12\36\1\0\7\35\1\0\7\35\1\0\3\36"+
    "\1\0\10\35\2\0\2\35\2\0\26\35\1\0\7\35\1\0\1\35"+
    "\3\0\4\35\2\0\1\36\1\35\7\36\2\0\2\36\2\0\3\36"+
    "\1\35\10\0\1\36\4\0\2\35\1\0\3\35\2\36\2\0\12\36"+
    "\4\35\7\0\1\35\5\0\3\36\1\0\6\35\4\0\2\35\2\0"+
    "\26\35\1\0\7\35\1\0\2\35\1\0\2\35\1\0\2\35\2\0"+
    "\1\36\1\0\5\36\4\0\2\36\2\0\3\36\3\0\1\36\7\0"+
    "\4\35\1\0\1\35\7\0\14\36\3\35\1\36\13\0\3\36\1\0"+
    "\11\35\1\0\3\35\1\0\26\35\1\0\7\35\1\0\2\35\1\0"+
    "\5\35\2\0\1\36\1\35\10\36\1\0\3\36\1\0\3\36\2\0"+
    "\1\35\17\0\2\35\2\36\2\0\12\36\1\0\1\35\17\0\3\36"+
    "\1\0\10\35\2\0\2\35\2\0\26\35\1\0\7\35\1\0\2\35"+
    "\1\0\5\35\2\0\1\36\1\35\7\36\2\0\2\36\2\0\3\36"+
    "\10\0\2\36\4\0\2\35\1\0\3\35\2\36\2\0\12\36\1\0"+
    "\1\35\20\0\1\36\1\35\1\0\6\35\3\0\3\35\1\0\4\35"+
    "\3\0\2\35\1\0\1\35\1\0\2\35\3\0\2\35\3\0\3\35"+
    "\3\0\14\35\4\0\5\36\3\0\3\36\1\0\4\36\2\0\1\35"+
    "\6\0\1\36\16\0\12\36\11\0\1\35\7\0\3\36\1\0\10\35"+
    "\1\0\3\35\1\0\27\35\1\0\12\35\1\0\5\35\3\0\1\35"+
    "\7\36\1\0\3\36\1\0\4\36\7\0\2\36\1\0\2\35\6\0"+
    "\2\35\2\36\2\0\12\36\22\0\2\36\1\0\10\35\1\0\3\35"+
    "\1\0\27\35\1\0\12\35\1\0\5\35\2\0\1\36\1\35\7\36"+
    "\1\0\3\36\1\0\4\36\7\0\2\36\7\0\1\35\1\0\2\35"+
    "\2\36\2\0\12\36\1\0\2\35\17\0\2\36\1\0\10\35\1\0"+
    "\3\35\1\0\51\35\2\0\1\35\7\36\1\0\3\36\1\0\4\36"+
    "\1\35\10\0\1\36\10\0\2\35\2\36\2\0\12\36\12\0\6\35"+
    "\2\0\2\36\1\0\22\35\3\0\30\35\1\0\11\35\1\0\1\35"+
    "\2\0\7\35\3\0\1\36\4\0\6\36\1\0\1\36\1\0\10\36"+
    "\22\0\2\36\15\0\60\35\1\36\2\35\7\36\4\0\10\35\10\36"+
    "\1\0\12\36\47\0\2\35\1\0\1\35\2\0\2\35\1\0\1\35"+
    "\2\0\1\35\6\0\4\35\1\0\7\35\1\0\3\35\1\0\1\35"+
    "\1\0\1\35\2\0\2\35\1\0\4\35\1\36\2\35\6\36\1\0"+
    "\2\36\1\35\2\0\5\35\1\0\1\35\1\0\6\36\2\0\12\36"+
    "\2\0\4\35\40\0\1\35\27\0\2\36\6\0\12\36\13\0\1\36"+
    "\1\0\1\36\1\0\1\36\4\0\2\36\10\35\1\0\44\35\4\0"+
    "\24\36\1\0\2\36\5\35\13\36\1\0\44\36\11\0\1\36\71\0"+
    "\53\35\24\36\1\35\12\36\6\0\6\35\4\36\4\35\3\36\1\35"+
    "\3\36\2\35\7\36\3\35\4\36\15\35\14\36\1\35\17\36\2\0"+
    "\46\35\1\0\1\35\5\0\1\35\2\0\53\35\1\0\u014d\35\1\0"+
    "\4\35\2\0\7\35\1\0\1\35\1\0\4\35\2\0\51\35\1\0"+
    "\4\35\2\0\41\35\1\0\4\35\2\0\7\35\1\0\1\35\1\0"+
    "\4\35\2\0\17\35\1\0\71\35\1\0\4\35\2\0\103\35\2\0"+
    "\3\36\40\0\20\35\20\0\125\35\14\0\u026c\35\2\0\21\35\1\0"+
    "\32\35\5\0\113\35\3\0\3\35\17\0\15\35\1\0\4\35\3\36"+
    "\13\0\22\35\3\36\13\0\22\35\2\36\14\0\15\35\1\0\3\35"+
    "\1\0\2\36\14\0\64\35\40\36\3\0\1\35\3\0\2\35\1\36"+
    "\2\0\12\36\41\0\3\36\2\0\12\36\6\0\130\35\10\0\51\35"+
    "\1\36\1\35\5\0\106\35\12\0\35\35\3\0\14\36\4\0\14\36"+
    "\12\0\12\36\36\35\2\0\5\35\13\0\54\35\4\0\21\36\7\35"+
    "\2\36\6\0\12\36\46\0\27\35\5\36\4\0\65\35\12\36\1\0"+
    "\35\36\2\0\13\36\6\0\12\36\15\0\1\35\130\0\5\36\57\35"+
    "\21\36\7\35\4\0\12\36\21\0\11\36\14\0\3\36\36\35\15\36"+
    "\2\35\12\36\54\35\16\36\14\0\44\35\24\36\10\0\12\36\3\0"+
    "\3\35\12\36\44\35\122\0\3\36\1\0\25\36\4\35\1\36\4\35"+
    "\3\36\2\35\11\0\300\35\47\36\25\0\4\36\u0116\35\2\0\6\35"+
    "\2\0\46\35\2\0\6\35\2\0\10\35\1\0\1\35\1\0\1\35"+
    "\1\0\1\35\1\0\37\35\2\0\65\35\1\0\7\35\1\0\1\35"+
    "\3\0\3\35\1\0\7\35\3\0\4\35\2\0\6\35\4\0\15\35"+
    "\5\0\3\35\1\0\7\35\16\0\5\36\30\0\1\5\1\5\5\36"+
    "\20\0\2\35\23\0\1\35\13\0\5\36\5\0\6\36\1\0\1\35"+
    "\15\0\1\35\20\0\15\35\3\0\33\35\25\0\15\36\4\0\1\36"+
    "\3\0\14\36\21\0\1\35\4\0\1\35\2\0\12\35\1\0\1\35"+
    "\3\0\5\35\6\0\1\35\1\0\1\35\1\0\1\35\1\0\4\35"+
    "\1\0\13\35\2\0\4\35\5\0\5\35\4\0\1\35\21\0\51\35"+
    "\u0a77\0\57\35\1\0\57\35\1\0\205\35\6\0\4\35\3\36\2\35"+
    "\14\0\46\35\1\0\1\35\5\0\1\35\2\0\70\35\7\0\1\35"+
    "\17\0\1\36\27\35\11\0\7\35\1\0\7\35\1\0\7\35\1\0"+
    "\7\35\1\0\7\35\1\0\7\35\1\0\7\35\1\0\7\35\1\0"+
    "\40\36\57\0\1\35\u01d5\0\3\35\31\0\11\35\6\36\1\0\5\35"+
    "\2\0\5\35\4\0\126\35\2\0\2\36\2\0\3\35\1\0\132\35"+
    "\1\0\4\35\5\0\51\35\3\0\136\35\21\0\33\35\65\0\20\35"+
    "\u0200\0\u19b6\35\112\0\u51cd\35\63\0\u048d\35\103\0\56\35\2\0\u010d\35"+
    "\3\0\20\35\12\36\2\35\24\0\57\35\1\36\4\0\12\36\1\0"+
    "\31\35\7\0\1\36\120\35\2\36\45\0\11\35\2\0\147\35\2\0"+
    "\4\35\1\0\4\35\14\0\13\35\115\0\12\35\1\36\3\35\1\36"+
    "\4\35\1\36\27\35\5\36\20\0\1\35\7\0\64\35\14\0\2\36"+
    "\62\35\21\36\13\0\12\36\6\0\22\36\6\35\3\0\1\35\4\0"+
    "\12\36\34\35\10\36\2\0\27\35\15\36\14\0\35\35\3\0\4\36"+
    "\57\35\16\36\16\0\1\35\12\36\46\0\51\35\16\36\11\0\3\35"+
    "\1\36\10\35\2\36\2\0\12\36\6\0\27\35\3\0\1\35\1\36"+
    "\4\0\60\35\1\36\1\35\3\36\2\35\2\36\5\35\2\36\1\35"+
    "\1\36\1\35\30\0\3\35\2\0\13\35\5\36\2\0\3\35\2\36"+
    "\12\0\6\35\2\0\6\35\2\0\6\35\11\0\7\35\1\0\7\35"+
    "\221\0\43\35\10\36\1\0\2\36\2\0\12\36\6\0\u2ba4\35\14\0"+
    "\27\35\4\0\61\35\u2104\0\u016e\35\2\0\152\35\46\0\7\35\14\0"+
    "\5\35\5\0\1\35\1\36\12\35\1\0\15\35\1\0\5\35\1\0"+
    "\1\35\1\0\2\35\1\0\2\35\1\0\154\35\41\0\u016b\35\22\0"+
    "\100\35\2\0\66\35\50\0\15\35\3\0\20\36\20\0\7\36\14\0"+
    "\2\35\30\0\3\35\31\0\1\35\6\0\5\35\1\0\207\35\2\0"+
    "\1\36\4\0\1\35\13\0\12\36\7\0\32\35\4\0\1\35\1\0"+
    "\32\35\13\0\131\35\3\0\6\35\2\0\6\35\2\0\6\35\2\0"+
    "\3\35\3\0\2\35\3\0\2\35\22\0\3\36\4\0\14\35\1\0"+
    "\32\35\1\0\23\35\1\0\2\35\1\0\17\35\2\0\16\35\42\0"+
    "\173\35\105\0\65\35\210\0\1\36\202\0\35\35\3\0\61\35\57\0"+
    "\37\35\21\0\33\35\65\0\36\35\2\0\44\35\4\0\10\35\1\0"+
    "\5\35\52\0\236\35\2\0\12\36\u0356\0\6\35\2\0\1\35\1\0"+
    "\54\35\1\0\2\35\3\0\1\35\2\0\27\35\252\0\26\35\12\0"+
    "\32\35\106\0\70\35\6\0\2\35\100\0\1\35\3\36\1\0\2\36"+
    "\5\0\4\36\4\35\1\0\3\35\1\0\33\35\4\0\3\36\4\0"+
    "\1\36\40\0\35\35\203\0\66\35\12\0\26\35\12\0\23\35\215\0"+
    "\111\35\u03b7\0\3\36\65\35\17\36\37\0\12\36\20\0\3\36\55\35"+
    "\13\36\2\0\1\36\22\0\31\35\7\0\12\36\6\0\3\36\44\35"+
    "\16\36\1\0\12\36\100\0\3\36\60\35\16\36\4\35\13\0\12\36"+
    "\u04a6\0\53\35\15\36\10\0\12\36\u0936\0\u036f\35\221\0\143\35\u0b9d\0"+
    "\u042f\35\u33d1\0\u0239\35\u04c7\0\105\35\13\0\1\35\56\36\20\0\4\36"+
    "\15\35\u4060\0\2\35\u2163\0\5\36\3\0\26\36\2\0\7\36\36\0"+
    "\4\36\224\0\3\36\u01bb\0\125\35\1\0\107\35\1\0\2\35\2\0"+
    "\1\35\2\0\2\35\2\0\4\35\1\0\14\35\1\0\1\35\1\0"+
    "\7\35\1\0\101\35\1\0\4\35\2\0\10\35\1\0\7\35\1\0"+
    "\34\35\1\0\4\35\1\0\5\35\1\0\1\35\3\0\7\35\1\0"+
    "\u0154\35\2\0\31\35\1\0\31\35\1\0\37\35\1\0\31\35\1\0"+
    "\37\35\1\0\31\35\1\0\37\35\1\0\31\35\1\0\37\35\1\0"+
    "\31\35\1\0\10\35\2\0\62\36\u1600\0\4\35\1\0\33\35\1\0"+
    "\2\35\1\0\1\35\2\0\1\35\1\0\12\35\1\0\4\35\1\0"+
    "\1\35\1\0\1\35\6\0\1\35\4\0\1\35\1\0\1\35\1\0"+
    "\1\35\1\0\3\35\1\0\2\35\1\0\1\35\2\0\1\35\1\0"+
    "\1\35\1\0\1\35\1\0\1\35\1\0\1\35\1\0\2\35\1\0"+
    "\1\35\2\0\4\35\1\0\7\35\1\0\4\35\1\0\4\35\1\0"+
    "\1\35\1\0\12\35\1\0\21\35\5\0\3\35\1\0\5\35\1\0"+
    "\21\35\u1144\0\ua6d7\35\51\0\u1035\35\13\0\336\35\u3fe2\0\u021e\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\36\36\0\140\36\200\0\360\36\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\22\3\1\4\1\1\4\4"+
    "\4\5\2\6\1\1\1\7\1\10\1\0\1\11\1\2"+
    "\1\0\1\2\13\3\2\12\1\4\21\3\1\4\2\0"+
    "\1\13\1\14\1\0\1\15\1\0\1\16\1\0\1\6"+
    "\2\0\1\10\1\2\1\17\1\2\1\3\1\12\31\3"+
    "\2\0\1\20\1\0\2\15\1\6\1\21\1\0\1\21"+
    "\5\3\1\22\11\3\4\0\1\15\1\6\1\23\1\3"+
    "\1\24\6\3\1\0\1\15\1\6\2\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0558\0\u0591\0\u05ca\0\u0603\0\253\0\253\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\253\0\u0792\0\u07cb"+
    "\0\253\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u043b"+
    "\0\u0b22\0\u043b\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78"+
    "\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u06ae\0\u0f5d\0\253\0\253"+
    "\0\u063c\0\u0f96\0\u0fcf\0\253\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\253\0\253\0\253\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0"+
    "\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\253\0\u179a\0\u17d3\0\u180c\0\u1845\0\253\0\u187e"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u043b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\253\0\u1d2b"+
    "\0\u043b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1c80\0\u1ef3\0\u1f2c\0\u1f65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\4\1\5\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\24\1\26\1\27\1\30"+
    "\4\24\2\4\1\31\1\32\2\31\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\37\1\41\1\42\1\43\1\44"+
    "\2\24\1\44\1\24\1\4\1\45\1\46\1\5\2\24"+
    "\1\47\2\0\60\47\1\50\1\47\1\51\3\47\4\52"+
    "\1\53\64\52\72\0\3\5\2\0\1\5\57\0\1\5"+
    "\6\0\1\54\73\0\1\24\1\55\4\24\1\56\3\24"+
    "\1\57\1\60\15\24\15\0\6\24\4\0\2\24\7\0"+
    "\2\24\1\61\26\24\15\0\6\24\4\0\2\24\7\0"+
    "\6\24\1\62\1\24\1\63\20\24\15\0\6\24\4\0"+
    "\2\24\7\0\6\24\1\64\3\24\1\65\4\24\1\66"+
    "\11\24\15\0\6\24\4\0\2\24\7\0\7\24\1\67"+
    "\21\24\15\0\6\24\4\0\2\24\7\0\1\70\1\24"+
    "\1\71\26\24\15\0\6\24\4\0\2\24\7\0\1\70"+
    "\6\24\1\72\21\24\15\0\6\24\4\0\2\24\7\0"+
    "\10\24\1\73\20\24\15\0\6\24\4\0\2\24\7\0"+
    "\2\24\1\74\10\24\1\65\7\24\1\75\5\24\15\0"+
    "\6\24\4\0\2\24\7\0\7\24\1\76\21\24\15\0"+
    "\6\24\4\0\2\24\7\0\1\24\1\77\1\100\26\24"+
    "\15\0\6\24\4\0\2\24\7\0\6\24\1\101\22\24"+
    "\15\0\6\24\4\0\2\24\7\0\6\24\1\102\1\103"+
    "\1\104\20\24\15\0\6\24\4\0\2\24\7\0\31\24"+
    "\15\0\6\24\4\0\2\24\7\0\6\24\1\105\1\24"+
    "\1\106\20\24\15\0\6\24\4\0\2\24\7\0\4\24"+
    "\1\107\1\110\14\24\1\111\6\24\15\0\6\24\4\0"+
    "\2\24\7\0\6\24\1\112\22\24\15\0\6\24\4\0"+
    "\2\24\7\0\17\24\1\113\11\24\15\0\6\24\4\0"+
    "\2\24\40\0\1\36\70\0\1\36\3\0\1\36\64\0"+
    "\1\36\1\0\1\37\2\0\1\114\6\0\1\115\1\116"+
    "\1\44\2\0\1\44\13\0\1\117\33\0\1\36\102\0"+
    "\1\120\13\0\1\121\55\0\1\37\72\0\2\122\2\0"+
    "\1\122\26\0\1\123\2\0\1\124\7\0\1\125\21\0"+
    "\1\122\1\126\1\0\1\125\1\0\1\126\1\123\4\0"+
    "\1\124\20\0\1\123\2\0\1\124\31\0\1\122\2\44"+
    "\2\0\1\44\1\123\4\0\1\124\1\0\1\127\2\0"+
    "\2\127\2\0\30\127\1\0\23\127\1\130\5\127\1\47"+
    "\2\0\60\47\1\0\1\47\1\0\3\47\7\0\1\131"+
    "\1\0\1\131\1\0\1\131\2\0\1\131\4\0\1\131"+
    "\31\0\1\131\5\0\3\131\3\0\4\52\1\0\64\52"+
    "\46\132\1\133\22\132\1\54\1\134\1\132\66\54\7\0"+
    "\2\24\1\135\26\24\15\0\6\24\4\0\2\24\7\0"+
    "\7\24\1\136\21\24\15\0\6\24\4\0\2\24\7\0"+
    "\13\24\1\137\15\24\15\0\6\24\4\0\2\24\7\0"+
    "\6\24\1\140\22\24\15\0\6\24\4\0\2\24\7\0"+
    "\4\24\1\141\24\24\15\0\6\24\4\0\2\24\7\0"+
    "\4\24\1\72\24\24\15\0\6\24\4\0\2\24\7\0"+
    "\22\24\1\70\6\24\15\0\6\24\4\0\2\24\7\0"+
    "\2\24\1\142\26\24\15\0\6\24\4\0\2\24\7\0"+
    "\20\24\1\143\10\24\15\0\6\24\4\0\2\24\7\0"+
    "\12\24\1\144\16\24\15\0\6\24\4\0\2\24\7\0"+
    "\1\24\1\145\27\24\15\0\6\24\4\0\2\24\7\0"+
    "\4\24\1\70\4\24\1\146\17\24\15\0\6\24\4\0"+
    "\2\24\7\0\3\24\1\147\1\150\4\24\1\151\17\24"+
    "\15\0\6\24\4\0\2\24\7\0\16\24\1\70\12\24"+
    "\15\0\6\24\4\0\2\24\7\0\4\24\1\152\24\24"+
    "\15\0\6\24\4\0\2\24\7\0\5\24\1\153\23\24"+
    "\15\0\6\24\4\0\2\24\7\0\4\24\1\154\24\24"+
    "\15\0\6\24\4\0\2\24\7\0\16\24\1\72\12\24"+
    "\15\0\6\24\4\0\2\24\7\0\2\24\1\155\26\24"+
    "\15\0\6\24\4\0\2\24\7\0\6\24\1\156\22\24"+
    "\15\0\6\24\4\0\2\24\7\0\10\24\1\157\20\24"+
    "\15\0\6\24\4\0\2\24\7\0\15\24\1\160\13\24"+
    "\15\0\6\24\4\0\2\24\7\0\1\24\1\161\27\24"+
    "\15\0\6\24\4\0\2\24\7\0\1\162\30\24\15\0"+
    "\6\24\4\0\2\24\7\0\7\24\1\163\2\24\1\164"+
    "\16\24\15\0\6\24\4\0\2\24\7\0\25\24\1\165"+
    "\3\24\15\0\6\24\4\0\2\24\7\0\5\24\1\166"+
    "\23\24\15\0\6\24\4\0\2\24\7\0\5\24\1\74"+
    "\23\24\15\0\6\24\4\0\2\24\7\0\5\24\1\167"+
    "\23\24\15\0\6\24\4\0\2\24\55\0\1\170\1\171"+
    "\2\0\1\171\41\0\1\125\21\0\1\122\1\126\1\0"+
    "\1\125\1\0\1\126\16\0\1\172\7\0\1\123\35\0"+
    "\2\122\2\0\1\122\1\123\5\0\1\172\45\0\1\173"+
    "\7\0\1\174\1\175\2\0\1\175\16\0\1\176\2\0"+
    "\1\176\4\0\1\176\1\0\1\176\1\0\1\176\1\0"+
    "\1\176\27\0\2\176\1\0\3\176\5\0\1\176\17\0"+
    "\1\123\2\0\1\124\31\0\1\122\1\126\3\0\1\126"+
    "\1\123\4\0\1\124\65\0\1\177\13\0\1\200\1\0"+
    "\1\200\1\0\1\200\2\0\1\200\4\0\1\200\31\0"+
    "\1\200\5\0\1\200\1\201\1\200\5\0\1\132\75\0"+
    "\3\24\1\202\25\24\15\0\6\24\4\0\2\24\7\0"+
    "\10\24\1\203\20\24\15\0\6\24\4\0\2\24\7\0"+
    "\20\24\1\204\10\24\15\0\6\24\4\0\2\24\7\0"+
    "\12\24\1\205\16\24\15\0\6\24\4\0\2\24\7\0"+
    "\5\24\1\156\23\24\15\0\6\24\4\0\2\24\7\0"+
    "\4\24\1\206\13\24\1\205\10\24\15\0\6\24\4\0"+
    "\2\24\7\0\10\24\1\70\20\24\15\0\6\24\4\0"+
    "\2\24\7\0\7\24\1\70\21\24\15\0\6\24\4\0"+
    "\2\24\7\0\10\24\1\207\20\24\15\0\6\24\4\0"+
    "\2\24\7\0\1\24\1\205\27\24\15\0\6\24\4\0"+
    "\2\24\7\0\6\24\1\210\22\24\15\0\6\24\4\0"+
    "\2\24\7\0\1\24\1\211\27\24\15\0\6\24\4\0"+
    "\2\24\7\0\10\24\1\140\20\24\15\0\6\24\4\0"+
    "\2\24\7\0\10\24\1\211\20\24\15\0\6\24\4\0"+
    "\2\24\7\0\2\24\1\212\26\24\15\0\6\24\4\0"+
    "\2\24\7\0\6\24\1\70\22\24\15\0\6\24\4\0"+
    "\2\24\7\0\15\24\1\70\13\24\15\0\6\24\4\0"+
    "\2\24\7\0\13\24\1\70\15\24\15\0\6\24\4\0"+
    "\2\24\7\0\12\24\1\213\16\24\15\0\6\24\4\0"+
    "\2\24\7\0\5\24\1\214\23\24\15\0\6\24\4\0"+
    "\2\24\7\0\14\24\1\167\14\24\15\0\6\24\4\0"+
    "\2\24\7\0\12\24\1\215\16\24\15\0\6\24\4\0"+
    "\2\24\7\0\5\24\1\101\23\24\15\0\6\24\4\0"+
    "\2\24\7\0\4\24\1\216\24\24\15\0\6\24\4\0"+
    "\2\24\7\0\10\24\1\217\20\24\15\0\6\24\4\0"+
    "\2\24\7\0\4\24\1\220\24\24\15\0\6\24\4\0"+
    "\2\24\7\0\13\24\1\143\15\24\15\0\6\24\4\0"+
    "\2\24\32\0\1\221\22\0\1\222\1\0\1\221\1\0"+
    "\1\222\63\0\1\122\2\171\2\0\1\171\64\0\1\223"+
    "\1\175\2\0\1\175\16\0\1\172\22\0\1\224\22\0"+
    "\1\225\1\0\1\224\1\0\1\225\6\0\1\172\7\0"+
    "\1\172\45\0\2\175\2\0\1\175\6\0\1\172\7\0"+
    "\1\176\2\0\1\176\4\0\1\226\1\0\1\176\1\124"+
    "\1\176\1\0\1\176\26\0\1\122\2\176\1\0\2\176"+
    "\1\226\4\0\1\124\1\176\64\0\1\227\13\0\4\24"+
    "\1\230\24\24\15\0\6\24\4\0\2\24\7\0\12\24"+
    "\1\220\16\24\15\0\6\24\4\0\2\24\7\0\10\24"+
    "\1\231\20\24\15\0\6\24\4\0\2\24\7\0\4\24"+
    "\1\70\24\24\15\0\6\24\4\0\2\24\7\0\5\24"+
    "\1\232\23\24\15\0\6\24\4\0\2\24\7\0\7\24"+
    "\1\74\21\24\15\0\6\24\4\0\2\24\7\0\7\24"+
    "\1\214\21\24\15\0\6\24\4\0\2\24\7\0\4\24"+
    "\1\233\24\24\15\0\6\24\4\0\2\24\7\0\24\24"+
    "\1\70\4\24\15\0\6\24\4\0\2\24\7\0\2\24"+
    "\1\70\26\24\15\0\6\24\4\0\2\24\7\0\1\24"+
    "\1\234\27\24\15\0\6\24\4\0\2\24\7\0\5\24"+
    "\1\235\23\24\15\0\6\24\4\0\2\24\7\0\6\24"+
    "\1\236\22\24\15\0\6\24\4\0\2\24\7\0\3\24"+
    "\1\237\25\24\15\0\6\24\4\0\2\24\7\0\1\240"+
    "\2\0\1\240\4\0\1\240\1\0\1\240\1\0\1\240"+
    "\1\0\1\240\27\0\2\240\1\0\3\240\5\0\1\240"+
    "\54\0\1\122\1\222\3\0\1\222\41\0\1\224\22\0"+
    "\1\225\1\0\1\224\1\0\1\225\16\0\1\241\2\0"+
    "\1\241\4\0\1\241\1\0\1\241\1\0\1\241\1\0"+
    "\1\241\27\0\2\241\1\0\3\241\5\0\1\241\7\0"+
    "\1\172\45\0\1\225\3\0\1\225\6\0\1\172\7\0"+
    "\1\176\2\0\1\176\4\0\1\226\1\0\1\176\1\124"+
    "\1\176\1\0\1\176\17\0\1\173\6\0\1\122\1\242"+
    "\1\176\1\0\2\176\1\226\4\0\1\124\1\176\7\0"+
    "\5\24\1\243\23\24\15\0\6\24\4\0\2\24\7\0"+
    "\2\24\1\244\26\24\15\0\6\24\4\0\2\24\7\0"+
    "\13\24\1\214\15\24\15\0\6\24\4\0\2\24\7\0"+
    "\13\24\1\205\15\24\15\0\6\24\4\0\2\24\7\0"+
    "\3\24\1\70\25\24\15\0\6\24\4\0\2\24\7\0"+
    "\1\70\30\24\15\0\6\24\4\0\2\24\7\0\17\24"+
    "\1\70\11\24\15\0\6\24\4\0\2\24\7\0\1\240"+
    "\2\0\1\240\4\0\1\240\1\0\1\240\1\0\1\240"+
    "\1\0\1\240\26\0\1\122\2\240\1\0\3\240\5\0"+
    "\1\240\7\0\1\176\2\0\1\176\4\0\1\226\1\0"+
    "\1\176\1\124\1\176\1\0\1\176\4\0\1\224\21\0"+
    "\1\122\2\176\1\224\2\176\1\226\4\0\1\124\1\176"+
    "\7\0\6\24\1\214\22\24\15\0\6\24\4\0\2\24"+
    "\7\0\1\24\1\143\27\24\15\0\6\24\4\0\2\24";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8094];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\31\1\2\11\6\1\1\11\1\1\1\0"+
    "\1\11\1\1\1\0\41\1\2\0\2\11\1\0\1\1"+
    "\1\0\1\11\1\0\1\1\2\0\3\11\34\1\2\0"+
    "\1\11\1\0\3\1\1\11\1\0\20\1\4\0\2\1"+
    "\1\11\10\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    public LexicalAnalyzer(java.io.Reader in, ComplexSymbolFactory sf) {
        this(in);
        symbolFactory = sf;
    }

    ComplexSymbolFactory symbolFactory;

    private Symbol symbol(String name, int sym) {
        return symbolFactory.newSymbol(name + " " + ParserSym.terminalNames[sym], sym, new Location(yyline + 1, yycolumn + 1, yychar), new Location(yyline + 1, yycolumn + yylength(), yychar + yylength()));
    }

    private Symbol symbol(String name, int sym, Object val) {
        Location left = new Location(yyline + 1, yycolumn + 1, yychar);
        Location right = new Location(yyline + 1, yycolumn + yylength(), yychar + yylength());
        return symbolFactory.newSymbol(name + " " + ParserSym.terminalNames[sym] + " " + val, sym, left, right, val);
    }

    private Symbol symbol(String name, int sym, Object val, int buflength) {
        Location left = new Location(yyline + 1, yycolumn + yylength() - buflength, yychar + yylength() - buflength);
        Location right = new Location(yyline + 1, yycolumn + yylength(), yychar + yylength());
        return symbolFactory.newSymbol(name + " " + ParserSym.terminalNames[sym] + " " + val, sym, left, right, val);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2878) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {      return symbol("EOF", ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <" + yytext() + ">");
            } 
            // fall through
          case 21: break;
          case 2: 
            { /* skip */
            } 
            // fall through
          case 22: break;
          case 3: 
            { return symbol("Identifier", Token.getWithRepresentation("identifier").getSym(), yytext());
            } 
            // fall through
          case 23: break;
          case 4: 
            { return symbol("Operator", Token.getWithRepresentation(yytext()).getSym());
            } 
            // fall through
          case 24: break;
          case 5: 
            { return symbol("Special", Token.getWithRepresentation(yytext()).getSym());
            } 
            // fall through
          case 25: break;
          case 6: 
            { return symbol("Integer", Token.getWithRepresentation("int_const").getSym(), Integer.parseInt(yytext()));
            } 
            // fall through
          case 26: break;
          case 7: 
            { string.setLength(0); yybegin(STRING);
            } 
            // fall through
          case 27: break;
          case 8: 
            { string.append(yytext());
            } 
            // fall through
          case 28: break;
          case 9: 
            { yybegin(YYINITIAL);
                                    return symbol("String", Token.getWithRepresentation("string_const").getSym(), string.toString());
            } 
            // fall through
          case 29: break;
          case 10: 
            { return symbol("Reserved", Token.valueOf("_" + yytext()).getSym());
            } 
            // fall through
          case 30: break;
          case 11: 
            { yybegin(COMMENT);
            } 
            // fall through
          case 31: break;
          case 12: 
            { return symbol("Special", Token.getWithRepresentation("[]").getSym());
            } 
            // fall through
          case 32: break;
          case 13: 
            { return symbol("Double", Token.getWithRepresentation("double_const").getSym(), Double.valueOf(yytext()));
            } 
            // fall through
          case 33: break;
          case 14: 
            { return symbol("Long", Token.getWithRepresentation("long_const").getSym(), Long.parseLong(yytext()));
            } 
            // fall through
          case 34: break;
          case 15: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 35: break;
          case 16: 
            { return symbol("Float", Token.getWithRepresentation("float_const").getSym(), Float.valueOf(yytext()));
            } 
            // fall through
          case 36: break;
          case 17: 
            { return symbol("Character", Token.getWithRepresentation("char_const").getSym(), yytext().substring(1, 2).charAt(0));
            } 
            // fall through
          case 37: break;
          case 18: 
            { return symbol("Reserved", Token.valueOf("_" + yytext()).getSym(), 1);
            } 
            // fall through
          case 38: break;
          case 19: 
            { char ch;
                                switch (yytext().substring(1, yytext().length() - 1).charAt(1)) {
                                    case '\'': ch = '\''; break;
                                    case '\"': ch = '\"'; break;
                                    case '\"': ch = '\\'; break;
                                    case 'n': ch = '\n'; break;
                                    case 'r': ch = '\r'; break;
                                    case 't': ch = '\t'; break;
                                    case 'b': ch = '\b'; break;
                                    case 'f': ch = '\f'; break;
                                    case '0': ch = '\0'; break;
                                    default: throw new RuntimeException("Unhandled escape character: " + yytext());
                                }
                                return symbol("EscapeCharacter", Token.getWithRepresentation("char_const").getSym(), ch);
            } 
            // fall through
          case 39: break;
          case 20: 
            { return symbol("Reserved", Token.valueOf("_" + yytext()).getSym(), 0);
            } 
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
