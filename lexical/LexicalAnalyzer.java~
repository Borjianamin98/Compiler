/* The following code was generated by JFlex 1.7.0 */

package lexical;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import syntax.ParserSym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Scanner.flex</tt>
 */
public class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\43\1\3\1\2\1\5\1\6\1\1\16\43\4\0\1\3\1\46"+
    "\1\71\1\4\1\42\1\53\1\55\1\70\1\56\1\56\1\53\1\51"+
    "\1\56\1\52\1\60\1\54\1\61\7\65\2\62\1\57\1\56\1\50"+
    "\1\45\1\47\1\56\1\0\4\64\1\66\1\64\5\42\1\41\1\42"+
    "\1\37\6\42\1\40\2\42\1\63\2\42\1\56\1\67\1\56\1\55"+
    "\1\42\1\0\1\21\1\23\1\12\1\25\1\17\1\7\1\24\1\26"+
    "\1\14\1\42\1\34\1\22\1\31\1\11\1\15\1\20\1\42\1\16"+
    "\1\27\1\13\1\10\1\30\1\32\1\33\1\36\1\35\1\56\1\55"+
    "\1\56\1\55\6\43\1\44\32\43\2\0\4\42\4\0\1\42\2\0"+
    "\1\43\7\0\1\42\4\0\1\42\5\0\27\42\1\0\37\42\1\0"+
    "\u01ca\42\4\0\14\42\16\0\5\42\7\0\1\42\1\0\1\42\21\0"+
    "\160\43\5\42\1\0\2\42\2\0\4\42\10\0\1\42\1\0\3\42"+
    "\1\0\1\42\1\0\24\42\1\0\123\42\1\0\213\42\1\0\5\43"+
    "\2\0\236\42\11\0\46\42\2\0\1\42\7\0\47\42\7\0\1\42"+
    "\1\0\55\43\1\0\1\43\1\0\2\43\1\0\2\43\1\0\1\43"+
    "\10\0\33\42\5\0\3\42\15\0\5\43\6\0\1\42\4\0\13\43"+
    "\5\0\53\42\37\43\4\0\2\42\1\43\143\42\1\0\1\42\10\43"+
    "\1\0\6\43\2\42\2\43\1\0\4\43\2\42\12\43\3\42\2\0"+
    "\1\42\17\0\1\43\1\42\1\43\36\42\33\43\2\0\131\42\13\43"+
    "\1\42\16\0\12\43\41\42\11\43\2\42\4\0\1\42\5\0\26\42"+
    "\4\43\1\42\11\43\1\42\3\43\1\42\5\43\22\0\31\42\3\43"+
    "\104\0\1\42\1\0\13\42\67\0\33\43\1\0\4\43\66\42\3\43"+
    "\1\42\22\43\1\42\7\43\12\42\2\43\2\0\12\43\1\0\7\42"+
    "\1\0\7\42\1\0\3\43\1\0\10\42\2\0\2\42\2\0\26\42"+
    "\1\0\7\42\1\0\1\42\3\0\4\42\2\0\1\43\1\42\7\43"+
    "\2\0\2\43\2\0\3\43\1\42\10\0\1\43\4\0\2\42\1\0"+
    "\3\42\2\43\2\0\12\43\4\42\7\0\1\42\5\0\3\43\1\0"+
    "\6\42\4\0\2\42\2\0\26\42\1\0\7\42\1\0\2\42\1\0"+
    "\2\42\1\0\2\42\2\0\1\43\1\0\5\43\4\0\2\43\2\0"+
    "\3\43\3\0\1\43\7\0\4\42\1\0\1\42\7\0\14\43\3\42"+
    "\1\43\13\0\3\43\1\0\11\42\1\0\3\42\1\0\26\42\1\0"+
    "\7\42\1\0\2\42\1\0\5\42\2\0\1\43\1\42\10\43\1\0"+
    "\3\43\1\0\3\43\2\0\1\42\17\0\2\42\2\43\2\0\12\43"+
    "\1\0\1\42\17\0\3\43\1\0\10\42\2\0\2\42\2\0\26\42"+
    "\1\0\7\42\1\0\2\42\1\0\5\42\2\0\1\43\1\42\7\43"+
    "\2\0\2\43\2\0\3\43\10\0\2\43\4\0\2\42\1\0\3\42"+
    "\2\43\2\0\12\43\1\0\1\42\20\0\1\43\1\42\1\0\6\42"+
    "\3\0\3\42\1\0\4\42\3\0\2\42\1\0\1\42\1\0\2\42"+
    "\3\0\2\42\3\0\3\42\3\0\14\42\4\0\5\43\3\0\3\43"+
    "\1\0\4\43\2\0\1\42\6\0\1\43\16\0\12\43\11\0\1\42"+
    "\7\0\3\43\1\0\10\42\1\0\3\42\1\0\27\42\1\0\12\42"+
    "\1\0\5\42\3\0\1\42\7\43\1\0\3\43\1\0\4\43\7\0"+
    "\2\43\1\0\2\42\6\0\2\42\2\43\2\0\12\43\22\0\2\43"+
    "\1\0\10\42\1\0\3\42\1\0\27\42\1\0\12\42\1\0\5\42"+
    "\2\0\1\43\1\42\7\43\1\0\3\43\1\0\4\43\7\0\2\43"+
    "\7\0\1\42\1\0\2\42\2\43\2\0\12\43\1\0\2\42\17\0"+
    "\2\43\1\0\10\42\1\0\3\42\1\0\51\42\2\0\1\42\7\43"+
    "\1\0\3\43\1\0\4\43\1\42\10\0\1\43\10\0\2\42\2\43"+
    "\2\0\12\43\12\0\6\42\2\0\2\43\1\0\22\42\3\0\30\42"+
    "\1\0\11\42\1\0\1\42\2\0\7\42\3\0\1\43\4\0\6\43"+
    "\1\0\1\43\1\0\10\43\22\0\2\43\15\0\60\42\1\43\2\42"+
    "\7\43\4\0\10\42\10\43\1\0\12\43\47\0\2\42\1\0\1\42"+
    "\2\0\2\42\1\0\1\42\2\0\1\42\6\0\4\42\1\0\7\42"+
    "\1\0\3\42\1\0\1\42\1\0\1\42\2\0\2\42\1\0\4\42"+
    "\1\43\2\42\6\43\1\0\2\43\1\42\2\0\5\42\1\0\1\42"+
    "\1\0\6\43\2\0\12\43\2\0\4\42\40\0\1\42\27\0\2\43"+
    "\6\0\12\43\13\0\1\43\1\0\1\43\1\0\1\43\4\0\2\43"+
    "\10\42\1\0\44\42\4\0\24\43\1\0\2\43\5\42\13\43\1\0"+
    "\44\43\11\0\1\43\71\0\53\42\24\43\1\42\12\43\6\0\6\42"+
    "\4\43\4\42\3\43\1\42\3\43\2\42\7\43\3\42\4\43\15\42"+
    "\14\43\1\42\17\43\2\0\46\42\1\0\1\42\5\0\1\42\2\0"+
    "\53\42\1\0\u014d\42\1\0\4\42\2\0\7\42\1\0\1\42\1\0"+
    "\4\42\2\0\51\42\1\0\4\42\2\0\41\42\1\0\4\42\2\0"+
    "\7\42\1\0\1\42\1\0\4\42\2\0\17\42\1\0\71\42\1\0"+
    "\4\42\2\0\103\42\2\0\3\43\40\0\20\42\20\0\125\42\14\0"+
    "\u026c\42\2\0\21\42\1\0\32\42\5\0\113\42\3\0\3\42\17\0"+
    "\15\42\1\0\4\42\3\43\13\0\22\42\3\43\13\0\22\42\2\43"+
    "\14\0\15\42\1\0\3\42\1\0\2\43\14\0\64\42\40\43\3\0"+
    "\1\42\3\0\2\42\1\43\2\0\12\43\41\0\3\43\2\0\12\43"+
    "\6\0\130\42\10\0\51\42\1\43\1\42\5\0\106\42\12\0\35\42"+
    "\3\0\14\43\4\0\14\43\12\0\12\43\36\42\2\0\5\42\13\0"+
    "\54\42\4\0\21\43\7\42\2\43\6\0\12\43\46\0\27\42\5\43"+
    "\4\0\65\42\12\43\1\0\35\43\2\0\13\43\6\0\12\43\15\0"+
    "\1\42\130\0\5\43\57\42\21\43\7\42\4\0\12\43\21\0\11\43"+
    "\14\0\3\43\36\42\15\43\2\42\12\43\54\42\16\43\14\0\44\42"+
    "\24\43\10\0\12\43\3\0\3\42\12\43\44\42\122\0\3\43\1\0"+
    "\25\43\4\42\1\43\4\42\3\43\2\42\11\0\300\42\47\43\25\0"+
    "\4\43\u0116\42\2\0\6\42\2\0\46\42\2\0\6\42\2\0\10\42"+
    "\1\0\1\42\1\0\1\42\1\0\1\42\1\0\37\42\2\0\65\42"+
    "\1\0\7\42\1\0\1\42\3\0\3\42\1\0\7\42\3\0\4\42"+
    "\2\0\6\42\4\0\15\42\5\0\3\42\1\0\7\42\16\0\5\43"+
    "\30\0\1\5\1\5\5\43\20\0\2\42\23\0\1\42\13\0\5\43"+
    "\5\0\6\43\1\0\1\42\15\0\1\42\20\0\15\42\3\0\33\42"+
    "\25\0\15\43\4\0\1\43\3\0\14\43\21\0\1\42\4\0\1\42"+
    "\2\0\12\42\1\0\1\42\3\0\5\42\6\0\1\42\1\0\1\42"+
    "\1\0\1\42\1\0\4\42\1\0\13\42\2\0\4\42\5\0\5\42"+
    "\4\0\1\42\21\0\51\42\u0a77\0\57\42\1\0\57\42\1\0\205\42"+
    "\6\0\4\42\3\43\2\42\14\0\46\42\1\0\1\42\5\0\1\42"+
    "\2\0\70\42\7\0\1\42\17\0\1\43\27\42\11\0\7\42\1\0"+
    "\7\42\1\0\7\42\1\0\7\42\1\0\7\42\1\0\7\42\1\0"+
    "\7\42\1\0\7\42\1\0\40\43\57\0\1\42\u01d5\0\3\42\31\0"+
    "\11\42\6\43\1\0\5\42\2\0\5\42\4\0\126\42\2\0\2\43"+
    "\2\0\3\42\1\0\132\42\1\0\4\42\5\0\51\42\3\0\136\42"+
    "\21\0\33\42\65\0\20\42\u0200\0\u19b6\42\112\0\u51cd\42\63\0\u048d\42"+
    "\103\0\56\42\2\0\u010d\42\3\0\20\42\12\43\2\42\24\0\57\42"+
    "\1\43\4\0\12\43\1\0\31\42\7\0\1\43\120\42\2\43\45\0"+
    "\11\42\2\0\147\42\2\0\4\42\1\0\4\42\14\0\13\42\115\0"+
    "\12\42\1\43\3\42\1\43\4\42\1\43\27\42\5\43\20\0\1\42"+
    "\7\0\64\42\14\0\2\43\62\42\21\43\13\0\12\43\6\0\22\43"+
    "\6\42\3\0\1\42\4\0\12\43\34\42\10\43\2\0\27\42\15\43"+
    "\14\0\35\42\3\0\4\43\57\42\16\43\16\0\1\42\12\43\46\0"+
    "\51\42\16\43\11\0\3\42\1\43\10\42\2\43\2\0\12\43\6\0"+
    "\27\42\3\0\1\42\1\43\4\0\60\42\1\43\1\42\3\43\2\42"+
    "\2\43\5\42\2\43\1\42\1\43\1\42\30\0\3\42\2\0\13\42"+
    "\5\43\2\0\3\42\2\43\12\0\6\42\2\0\6\42\2\0\6\42"+
    "\11\0\7\42\1\0\7\42\221\0\43\42\10\43\1\0\2\43\2\0"+
    "\12\43\6\0\u2ba4\42\14\0\27\42\4\0\61\42\u2104\0\u016e\42\2\0"+
    "\152\42\46\0\7\42\14\0\5\42\5\0\1\42\1\43\12\42\1\0"+
    "\15\42\1\0\5\42\1\0\1\42\1\0\2\42\1\0\2\42\1\0"+
    "\154\42\41\0\u016b\42\22\0\100\42\2\0\66\42\50\0\15\42\3\0"+
    "\20\43\20\0\7\43\14\0\2\42\30\0\3\42\31\0\1\42\6\0"+
    "\5\42\1\0\207\42\2\0\1\43\4\0\1\42\13\0\12\43\7\0"+
    "\32\42\4\0\1\42\1\0\32\42\13\0\131\42\3\0\6\42\2\0"+
    "\6\42\2\0\6\42\2\0\3\42\3\0\2\42\3\0\2\42\22\0"+
    "\3\43\4\0\14\42\1\0\32\42\1\0\23\42\1\0\2\42\1\0"+
    "\17\42\2\0\16\42\42\0\173\42\105\0\65\42\210\0\1\43\202\0"+
    "\35\42\3\0\61\42\57\0\37\42\21\0\33\42\65\0\36\42\2\0"+
    "\44\42\4\0\10\42\1\0\5\42\52\0\236\42\2\0\12\43\u0356\0"+
    "\6\42\2\0\1\42\1\0\54\42\1\0\2\42\3\0\1\42\2\0"+
    "\27\42\252\0\26\42\12\0\32\42\106\0\70\42\6\0\2\42\100\0"+
    "\1\42\3\43\1\0\2\43\5\0\4\43\4\42\1\0\3\42\1\0"+
    "\33\42\4\0\3\43\4\0\1\43\40\0\35\42\203\0\66\42\12\0"+
    "\26\42\12\0\23\42\215\0\111\42\u03b7\0\3\43\65\42\17\43\37\0"+
    "\12\43\20\0\3\43\55\42\13\43\2\0\1\43\22\0\31\42\7\0"+
    "\12\43\6\0\3\43\44\42\16\43\1\0\12\43\100\0\3\43\60\42"+
    "\16\43\4\42\13\0\12\43\u04a6\0\53\42\15\43\10\0\12\43\u0936\0"+
    "\u036f\42\221\0\143\42\u0b9d\0\u042f\42\u33d1\0\u0239\42\u04c7\0\105\42\13\0"+
    "\1\42\56\43\20\0\4\43\15\42\u4060\0\2\42\u2163\0\5\43\3\0"+
    "\26\43\2\0\7\43\36\0\4\43\224\0\3\43\u01bb\0\125\42\1\0"+
    "\107\42\1\0\2\42\2\0\1\42\2\0\2\42\2\0\4\42\1\0"+
    "\14\42\1\0\1\42\1\0\7\42\1\0\101\42\1\0\4\42\2\0"+
    "\10\42\1\0\7\42\1\0\34\42\1\0\4\42\1\0\5\42\1\0"+
    "\1\42\3\0\7\42\1\0\u0154\42\2\0\31\42\1\0\31\42\1\0"+
    "\37\42\1\0\31\42\1\0\37\42\1\0\31\42\1\0\37\42\1\0"+
    "\31\42\1\0\37\42\1\0\31\42\1\0\10\42\2\0\62\43\u1600\0"+
    "\4\42\1\0\33\42\1\0\2\42\1\0\1\42\2\0\1\42\1\0"+
    "\12\42\1\0\4\42\1\0\1\42\1\0\1\42\6\0\1\42\4\0"+
    "\1\42\1\0\1\42\1\0\1\42\1\0\3\42\1\0\2\42\1\0"+
    "\1\42\2\0\1\42\1\0\1\42\1\0\1\42\1\0\1\42\1\0"+
    "\1\42\1\0\2\42\1\0\1\42\2\0\4\42\1\0\7\42\1\0"+
    "\4\42\1\0\4\42\1\0\1\42\1\0\12\42\1\0\21\42\5\0"+
    "\3\42\1\0\5\42\1\0\21\42\u1144\0\ua6d7\42\51\0\u1035\42\13\0"+
    "\336\42\u3fe2\0\u021e\42\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\43\36\0\140\43\200\0\360\43\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\24\3\1\4\1\1\6\4"+
    "\3\5\2\6\1\1\1\7\1\10\1\0\1\11\1\2"+
    "\1\0\1\2\20\3\2\12\1\4\25\3\2\0\1\4"+
    "\2\0\1\13\1\14\2\0\1\6\2\0\1\15\1\2"+
    "\1\16\1\2\1\3\1\12\50\3\3\0\2\14\1\6"+
    "\1\17\1\0\1\17\12\3\1\20\17\3\4\0\1\14"+
    "\1\6\1\21\1\3\1\22\13\3\1\0\1\14\1\6"+
    "\5\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\256\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\u05e4\0\u0706\0\256\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\256\0\u0862\0\u089c\0\256\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u04c2"+
    "\0\u0d24\0\u04c2\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220"+
    "\0\u125a\0\u125a\0\u077a\0\u1294\0\256\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u13b6\0\u13f0\0\256\0\256\0\256\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804"+
    "\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\256"+
    "\0\u1f44\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u0d24\0\u202c\0\u2066"+
    "\0\u20a0\0\u20da\0\u2114\0\u214e\0\u04c2\0\u2188\0\u21c2\0\u21fc"+
    "\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc"+
    "\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u1e96\0\u2562"+
    "\0\u259c\0\u25d6\0\256\0\u2610\0\u04c2\0\u264a\0\u2684\0\u26be"+
    "\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e"+
    "\0\u28c8\0\u2562\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\4\1\5\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\26"+
    "\1\31\4\26\1\32\3\26\2\4\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\33\1\43\1\44"+
    "\1\45\1\46\1\47\2\26\1\47\1\26\1\4\1\50"+
    "\1\51\1\52\2\0\64\52\1\53\1\52\1\54\4\55"+
    "\1\56\65\55\73\0\3\5\2\0\1\5\67\0\1\57"+
    "\74\0\1\26\1\60\4\26\1\61\3\26\1\62\1\63"+
    "\22\26\14\0\6\26\12\0\2\26\1\64\15\26\1\65"+
    "\15\26\14\0\6\26\12\0\1\26\1\66\4\26\1\67"+
    "\1\26\1\70\1\26\1\71\23\26\14\0\6\26\12\0"+
    "\6\26\1\72\3\26\1\73\1\74\3\26\1\75\16\26"+
    "\14\0\6\26\12\0\7\26\1\76\17\26\1\77\6\26"+
    "\14\0\6\26\12\0\1\100\1\26\1\101\33\26\14\0"+
    "\6\26\12\0\1\100\6\26\1\102\26\26\14\0\6\26"+
    "\12\0\10\26\1\103\25\26\14\0\6\26\12\0\2\26"+
    "\1\104\10\26\1\73\10\26\1\105\11\26\14\0\6\26"+
    "\12\0\1\26\1\106\5\26\1\107\26\26\14\0\6\26"+
    "\12\0\1\26\1\110\1\111\33\26\14\0\6\26\12\0"+
    "\6\26\1\112\27\26\14\0\6\26\12\0\6\26\1\113"+
    "\1\114\1\115\25\26\14\0\6\26\12\0\6\26\1\110"+
    "\27\26\14\0\6\26\12\0\6\26\1\116\1\26\1\117"+
    "\25\26\14\0\6\26\12\0\36\26\14\0\6\26\12\0"+
    "\4\26\1\120\1\121\11\26\1\122\3\26\1\123\12\26"+
    "\14\0\6\26\12\0\5\26\1\124\1\125\27\26\14\0"+
    "\6\26\12\0\17\26\1\126\16\26\14\0\6\26\12\0"+
    "\31\26\1\127\4\26\14\0\6\26\50\0\1\33\71\0"+
    "\1\33\1\0\1\33\67\0\1\33\2\0\1\33\66\0"+
    "\1\33\3\0\1\33\7\0\1\130\1\47\2\0\1\47"+
    "\51\0\1\33\1\0\1\43\1\0\1\131\1\132\5\0"+
    "\1\133\1\134\1\47\2\0\1\47\10\0\1\135\40\0"+
    "\1\33\103\0\1\43\73\0\2\136\2\0\1\136\23\0"+
    "\1\137\13\0\1\140\24\0\1\136\1\141\1\0\1\140"+
    "\1\0\1\141\1\137\22\0\1\137\40\0\1\136\2\47"+
    "\2\0\1\47\1\137\3\0\1\142\2\0\2\142\2\0"+
    "\35\142\1\0\22\142\1\143\2\142\1\52\2\0\64\52"+
    "\1\0\1\52\10\0\1\144\1\0\1\144\1\0\1\144"+
    "\2\0\1\144\4\0\1\144\4\0\1\144\30\0\1\144"+
    "\5\0\3\144\4\55\1\0\65\55\54\145\1\146\15\145"+
    "\1\57\1\147\1\145\67\57\7\0\2\26\1\150\33\26"+
    "\14\0\6\26\12\0\7\26\1\151\26\26\14\0\6\26"+
    "\12\0\13\26\1\152\22\26\14\0\6\26\12\0\6\26"+
    "\1\153\27\26\14\0\6\26\12\0\4\26\1\154\1\155"+
    "\12\26\1\156\15\26\14\0\6\26\12\0\5\26\1\112"+
    "\30\26\14\0\6\26\12\0\13\26\1\157\22\26\14\0"+
    "\6\26\12\0\4\26\1\102\31\26\14\0\6\26\12\0"+
    "\23\26\1\100\12\26\14\0\6\26\12\0\22\26\1\160"+
    "\13\26\14\0\6\26\12\0\2\26\1\161\33\26\14\0"+
    "\6\26\12\0\20\26\1\162\15\26\14\0\6\26\12\0"+
    "\12\26\1\163\23\26\14\0\6\26\12\0\12\26\1\164"+
    "\23\26\14\0\6\26\12\0\1\26\1\165\34\26\14\0"+
    "\6\26\12\0\11\26\1\166\24\26\14\0\6\26\12\0"+
    "\4\26\1\100\31\26\14\0\6\26\12\0\3\26\1\167"+
    "\1\170\4\26\1\171\3\26\1\172\20\26\14\0\6\26"+
    "\12\0\1\26\1\173\14\26\1\100\17\26\14\0\6\26"+
    "\12\0\4\26\1\174\31\26\14\0\6\26\12\0\14\26"+
    "\1\175\21\26\14\0\6\26\12\0\5\26\1\176\1\177"+
    "\27\26\14\0\6\26\12\0\4\26\1\200\31\26\14\0"+
    "\6\26\12\0\16\26\1\102\17\26\14\0\6\26\12\0"+
    "\2\26\1\201\33\26\14\0\6\26\12\0\6\26\1\202"+
    "\27\26\14\0\6\26\12\0\10\26\1\203\25\26\14\0"+
    "\6\26\12\0\15\26\1\204\20\26\14\0\6\26\12\0"+
    "\1\26\1\205\34\26\14\0\6\26\12\0\1\206\12\26"+
    "\1\207\22\26\14\0\6\26\12\0\7\26\1\65\2\26"+
    "\1\210\23\26\14\0\6\26\12\0\15\26\1\211\10\26"+
    "\1\212\7\26\14\0\6\26\12\0\6\26\1\213\27\26"+
    "\14\0\6\26\12\0\5\26\1\214\30\26\14\0\6\26"+
    "\12\0\7\26\1\215\26\26\14\0\6\26\12\0\5\26"+
    "\1\216\5\26\1\217\22\26\14\0\6\26\12\0\5\26"+
    "\1\220\30\26\14\0\6\26\12\0\32\26\1\221\3\26"+
    "\14\0\6\26\36\0\1\140\25\0\1\141\1\0\1\140"+
    "\1\0\1\141\65\0\1\222\1\223\2\0\1\223\37\0"+
    "\1\140\24\0\1\136\1\141\1\0\1\140\1\0\1\141"+
    "\23\0\1\137\41\0\2\136\2\0\1\136\1\137\54\0"+
    "\2\224\6\0\1\225\1\226\2\0\1\226\13\0\1\227"+
    "\2\0\1\227\4\0\1\227\1\0\1\227\1\0\1\227"+
    "\1\0\1\227\33\0\2\227\1\0\3\227\22\0\1\137"+
    "\40\0\1\136\1\141\3\0\1\141\1\137\73\0\1\230"+
    "\10\0\1\231\1\0\1\231\1\0\1\231\2\0\1\231"+
    "\4\0\1\231\4\0\1\231\30\0\1\231\5\0\1\231"+
    "\1\232\1\231\2\0\1\145\76\0\3\26\1\233\32\26"+
    "\14\0\6\26\12\0\10\26\1\234\25\26\14\0\6\26"+
    "\12\0\20\26\1\235\15\26\14\0\6\26\12\0\12\26"+
    "\1\236\23\26\14\0\6\26\12\0\5\26\1\202\30\26"+
    "\14\0\6\26\12\0\6\26\1\237\27\26\14\0\6\26"+
    "\12\0\5\26\1\240\30\26\14\0\6\26\12\0\13\26"+
    "\1\241\22\26\14\0\6\26\12\0\10\26\1\242\25\26"+
    "\14\0\6\26\12\0\4\26\1\243\13\26\1\236\15\26"+
    "\14\0\6\26\12\0\10\26\1\100\25\26\14\0\6\26"+
    "\12\0\20\26\1\244\15\26\14\0\6\26\12\0\7\26"+
    "\1\100\26\26\14\0\6\26\12\0\10\26\1\245\25\26"+
    "\14\0\6\26\12\0\10\26\1\246\25\26\14\0\6\26"+
    "\12\0\6\26\1\247\27\26\14\0\6\26\12\0\1\26"+
    "\1\250\34\26\14\0\6\26\12\0\10\26\1\153\25\26"+
    "\14\0\6\26\12\0\5\26\1\251\30\26\14\0\6\26"+
    "\12\0\22\26\1\100\13\26\14\0\6\26\12\0\10\26"+
    "\1\250\25\26\14\0\6\26\12\0\13\26\1\252\22\26"+
    "\14\0\6\26\12\0\21\26\1\253\14\26\14\0\6\26"+
    "\12\0\4\26\1\254\31\26\14\0\6\26\12\0\6\26"+
    "\1\100\27\26\14\0\6\26\12\0\15\26\1\100\20\26"+
    "\14\0\6\26\12\0\13\26\1\100\22\26\14\0\6\26"+
    "\12\0\12\26\1\255\23\26\14\0\6\26\12\0\5\26"+
    "\1\237\30\26\14\0\6\26\12\0\14\26\1\220\21\26"+
    "\14\0\6\26\12\0\12\26\1\256\23\26\14\0\6\26"+
    "\12\0\10\26\1\257\25\26\14\0\6\26\12\0\4\26"+
    "\1\252\31\26\14\0\6\26\12\0\2\26\1\260\33\26"+
    "\14\0\6\26\12\0\10\26\1\261\25\26\14\0\6\26"+
    "\12\0\7\26\1\236\26\26\14\0\6\26\12\0\4\26"+
    "\1\262\31\26\14\0\6\26\12\0\4\26\1\263\31\26"+
    "\14\0\6\26\12\0\16\26\1\100\17\26\14\0\6\26"+
    "\12\0\12\26\1\264\23\26\14\0\6\26\12\0\13\26"+
    "\1\162\22\26\14\0\6\26\12\0\32\26\1\100\3\26"+
    "\14\0\6\26\36\0\1\265\25\0\1\266\1\0\1\265"+
    "\1\0\1\266\64\0\1\136\2\223\2\0\1\223\65\0"+
    "\1\267\1\226\2\0\1\226\37\0\1\270\25\0\1\271"+
    "\1\0\1\270\1\0\1\271\65\0\2\226\2\0\1\226"+
    "\13\0\1\227\2\0\1\227\4\0\1\272\1\0\1\227"+
    "\1\0\1\227\1\0\1\227\32\0\1\136\2\227\1\0"+
    "\2\227\1\272\73\0\1\273\10\0\4\26\1\274\31\26"+
    "\14\0\6\26\12\0\12\26\1\262\23\26\14\0\6\26"+
    "\12\0\10\26\1\275\25\26\14\0\6\26\12\0\2\26"+
    "\1\100\33\26\14\0\6\26\12\0\15\26\1\211\20\26"+
    "\14\0\6\26\12\0\11\26\1\276\24\26\14\0\6\26"+
    "\12\0\20\26\1\277\15\26\14\0\6\26\12\0\5\26"+
    "\1\300\30\26\14\0\6\26\12\0\20\26\1\100\15\26"+
    "\14\0\6\26\12\0\16\26\1\301\17\26\14\0\6\26"+
    "\12\0\7\26\1\216\26\26\14\0\6\26\12\0\7\26"+
    "\1\237\26\26\14\0\6\26\12\0\20\26\1\302\15\26"+
    "\14\0\6\26\12\0\5\26\1\303\30\26\14\0\6\26"+
    "\12\0\12\26\1\257\23\26\14\0\6\26\12\0\10\26"+
    "\1\304\25\26\14\0\6\26\12\0\25\26\1\100\10\26"+
    "\14\0\6\26\12\0\1\26\1\305\34\26\14\0\6\26"+
    "\12\0\4\26\1\162\31\26\14\0\6\26\12\0\10\26"+
    "\1\216\25\26\14\0\6\26\12\0\6\26\1\306\27\26"+
    "\14\0\6\26\12\0\3\26\1\307\32\26\14\0\6\26"+
    "\12\0\1\26\1\310\34\26\14\0\6\26\12\0\4\26"+
    "\1\126\31\26\14\0\6\26\12\0\1\311\2\0\1\311"+
    "\4\0\1\311\1\0\1\311\1\0\1\311\1\0\1\311"+
    "\33\0\2\311\1\0\3\311\63\0\1\136\1\266\3\0"+
    "\1\266\13\0\1\312\2\0\1\312\4\0\1\312\1\0"+
    "\1\312\1\0\1\312\1\0\1\312\33\0\2\312\1\0"+
    "\3\312\64\0\1\271\3\0\1\271\13\0\1\227\2\0"+
    "\1\227\4\0\1\272\1\0\1\227\1\0\1\227\1\0"+
    "\1\227\23\0\2\224\5\0\1\136\1\313\1\227\1\0"+
    "\2\227\1\272\12\0\5\26\1\155\30\26\14\0\6\26"+
    "\12\0\4\26\1\164\31\26\14\0\6\26\12\0\11\26"+
    "\1\314\24\26\14\0\6\26\12\0\2\26\1\315\33\26"+
    "\14\0\6\26\12\0\10\26\1\306\25\26\14\0\6\26"+
    "\12\0\4\26\1\316\31\26\14\0\6\26\12\0\3\26"+
    "\1\100\32\26\14\0\6\26\12\0\3\26\1\317\32\26"+
    "\14\0\6\26\12\0\13\26\1\236\22\26\14\0\6\26"+
    "\12\0\1\100\35\26\14\0\6\26\12\0\17\26\1\100"+
    "\16\26\14\0\6\26\12\0\12\26\1\202\23\26\14\0"+
    "\6\26\12\0\1\311\2\0\1\311\4\0\1\311\1\0"+
    "\1\311\1\0\1\311\1\0\1\311\32\0\1\136\2\311"+
    "\1\0\3\311\12\0\1\227\2\0\1\227\4\0\1\272"+
    "\1\0\1\227\1\0\1\227\1\0\1\227\5\0\1\270"+
    "\24\0\1\136\2\227\1\270\2\227\1\272\12\0\12\26"+
    "\1\320\23\26\14\0\6\26\12\0\1\26\1\162\34\26"+
    "\14\0\6\26\12\0\10\26\1\164\25\26\14\0\6\26"+
    "\12\0\4\26\1\260\31\26\14\0\6\26\12\0\3\26"+
    "\1\162\32\26\14\0\6\26\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10846];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\26\1\1\11\7\1\1\11\5\1\1\11"+
    "\1\1\1\0\1\11\1\1\1\0\51\1\2\0\1\1"+
    "\2\0\1\11\1\1\2\0\1\1\2\0\3\11\53\1"+
    "\3\0\3\1\1\11\1\0\33\1\4\0\2\1\1\11"+
    "\15\1\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    public LexicalAnalyzer(java.io.Reader in, ComplexSymbolFactory sf) {
        this(in);
        symbolFactory = sf;
    }

    ComplexSymbolFactory symbolFactory;

    private Symbol symbol(String name, int sym) {
        return symbolFactory.newSymbol(name, sym, new Location(yyline + 1, yycolumn + 1, yychar), new Location(yyline + 1, yycolumn + yylength(), yychar + yylength()));
    }

    private Symbol symbol(String name, int sym, Object val) {
        Location left = new Location(yyline + 1, yycolumn + 1, yychar);
        Location right = new Location(yyline + 1, yycolumn + yylength(), yychar + yylength());
        return symbolFactory.newSymbol(name, sym, left, right, val);
    }

    private Symbol symbol(String name, int sym, Object val, int buflength) {
        Location left = new Location(yyline + 1, yycolumn + yylength() - buflength, yychar + yylength() - buflength);
        Location right = new Location(yyline + 1, yycolumn + yylength(), yychar + yylength());
        return symbolFactory.newSymbol(name, sym, left, right, val);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2886) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {      return symbol("EOF", ParserSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <" + yytext() + ">");
            } 
            // fall through
          case 19: break;
          case 2: 
            { /* skip */
            } 
            // fall through
          case 20: break;
          case 3: 
            { return symbol("Identifier", Token.getWithRepresentation("identifier").getSym(), yytext());
            } 
            // fall through
          case 21: break;
          case 4: 
            { return symbol("Operator", Token.getWithRepresentation(yytext()).getSym());
            } 
            // fall through
          case 22: break;
          case 5: 
            { return symbol("Special", Token.getWithRepresentation(yytext()).getSym());
            } 
            // fall through
          case 23: break;
          case 6: 
            { try {
                                        int int_val = Integer.parseInt(yytext());
                                        return symbol("Integer", Token.getWithRepresentation("int_const").getSym(), int_val);
                                    } catch (NumberFormatException e) {
                                        // ignore it
                                    }
                                    try {
                                        long long_val = Long.parseLong(yytext());
                                        return symbol("Long", Token.getWithRepresentation("long_const").getSym(), long_val);
                                    } catch (NumberFormatException e) {
                                        throw new Error("overflow exception: " + yytext() + " is too large");
                                    }
            } 
            // fall through
          case 24: break;
          case 7: 
            { string.setLength(0); string.append(yytext()); yybegin(STRING);
            } 
            // fall through
          case 25: break;
          case 8: 
            { string.append( yytext() );
            } 
            // fall through
          case 26: break;
          case 9: 
            { yybegin(YYINITIAL);
                                    string.append(yytext());
                                    return symbol("String", Token.getWithRepresentation("string_const").getSym(), string.toString());
            } 
            // fall through
          case 27: break;
          case 10: 
            { return symbol("Reserved", Token.valueOf("_" + yytext()).getSym());
            } 
            // fall through
          case 28: break;
          case 11: 
            { yybegin(COMMENT);
            } 
            // fall through
          case 29: break;
          case 12: 
            { return symbol("Real", Token.getWithRepresentation("real_const").getSym(), Double.valueOf(yytext()));
            } 
            // fall through
          case 30: break;
          case 13: 
            { string.append(yytext());
            } 
            // fall through
          case 31: break;
          case 14: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 32: break;
          case 15: 
            { return symbol("Character", Token.getWithRepresentation("char_const").getSym(), yytext().substring(1, 2).charAt(0));
            } 
            // fall through
          case 33: break;
          case 16: 
            { return symbol("Reserved", Token.valueOf("_" + yytext()).getSym(), 1);
            } 
            // fall through
          case 34: break;
          case 17: 
            { return symbol("EscapeCharacter", Token.getWithRepresentation("char_const").getSym(), yytext().substring(1, yytext().length() - 1).charAt(0));
            } 
            // fall through
          case 35: break;
          case 18: 
            { return symbol("Reserved", Token.valueOf("_" + yytext()).getSym(), 0);
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
