package semantic.syntaxTree.declaration;

import semantic.syntaxTree.BlockCode;
import semantic.syntaxTree.declaration.record.Field;
import semantic.syntaxTree.expression.Expression;
import semantic.syntaxTree.expression.identifier.SimpleLocalVariable;
import semantic.syntaxTree.statement.assignment.DirectAssignment;
import semantic.symbolTable.typeTree.TypeTree;

import java.util.ArrayList;
import java.util.List;

/**
 * this class is generated by parser when read input and this class
 * knows how to generate different type of variables (array variable,
 * simple variable, record variable and global (field) variable)
 * parser call appropriate factory method of class for generate correct
 * variable type depend of context of grammar
 */
public class VariableDCLFactory {
    private String variableName;
    private boolean constant;
    private String typeName;
    private int dimensions;
    private Expression defaultValue;

    private VariableDCLFactory(String variableName, boolean constant, String typeName, int dimensions, Expression defaultValue) {
        this.variableName = variableName;
        this.constant = constant;
        this.typeName = typeName;
        this.dimensions = dimensions;
        this.defaultValue = defaultValue;
    }

    private VariableDCLFactory() {
    }

    public static VariableDCLFactory create() {
        return new VariableDCLFactory();
    }

    public VariableDCLFactory copy() {
        return new VariableDCLFactory(variableName, constant, typeName, dimensions, defaultValue);
    }

    public VariableDCLFactory setVariableName(String name) {
        this.variableName = name;
        return this;
    }

    public VariableDCLFactory setConstant(boolean constant) {
        this.constant = constant;
        return this;
    }

    public VariableDCLFactory setTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    public VariableDCLFactory setDimensions(int dimensions) {
        this.dimensions = dimensions;
        return this;
    }

    public VariableDCLFactory setDefaultValue(Expression defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * factory method to create variable (simple or array)
     * suitable for inside of a body of method
     *
     * @return list of codes which execution of them will create appropriate variable
     */
    public List<BlockCode> createMethodVariable() {
        List<BlockCode> blockCodes = new ArrayList<>();
        if (typeName.equals(TypeTree.AUTO_NAME))
            blockCodes.add(new AutoVariableDCL(variableName, constant, defaultValue));
        else {
            if (dimensions > 0) {
                blockCodes.add(new ArrayDCL(variableName, typeName, dimensions, constant, false));
            } else {
                blockCodes.add(new VariableDCL(variableName, typeName, constant, false));
            }
            if (defaultValue != null)
                blockCodes.add(new DirectAssignment(new SimpleLocalVariable(variableName), defaultValue));
        }
        return blockCodes;
    }

    /**
     * factory method to create field (simple or array)
     * suitable for outside of a body of method (global variable)
     *
     * @return a field which is used in class declaration (ClassDCL)
     */
    public Field createFieldVariable(boolean isStatic) {
        if (typeName.equals(TypeTree.AUTO_NAME)) {
            return new Field(variableName, defaultValue, constant, isStatic);
        } else {
            if (dimensions > 0) {
                return new Field(variableName, typeName, dimensions, defaultValue, constant, isStatic);
            } else {
                return new Field(variableName, typeName, dimensions, defaultValue, constant, isStatic);
            }
        }
    }
}
